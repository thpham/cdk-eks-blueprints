"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApplicationStage = exports.CodePipelineStack = exports.CodePipelineBuilder = exports.DEFAULT_BUILD_POLICIES = exports.isCodeStarConnection = exports.isCodeCommitRepo = exports.GitHubTrigger = exports.cdkpipelines = void 0;
const assert = require("assert");
const cdk = require("aws-cdk-lib");
const codecommit = require("aws-cdk-lib/aws-codecommit");
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const cdkpipelines = require("aws-cdk-lib/pipelines");
exports.cdkpipelines = cdkpipelines;
const aws_codepipeline_actions_1 = require("aws-cdk-lib/aws-codepipeline-actions");
Object.defineProperty(exports, "GitHubTrigger", { enumerable: true, get: function () { return aws_codepipeline_actions_1.GitHubTrigger; } });
const usage_utils_1 = require("../utils/usage-utils");
function isCodeCommitRepo(repo) {
    return Object.prototype.hasOwnProperty.call(repo, 'codeCommitRepoName');
}
exports.isCodeCommitRepo = isCodeCommitRepo;
function isCodeStarConnection(repo) {
    return Object.prototype.hasOwnProperty.call(repo, 'codeStarConnectionArn');
}
exports.isCodeStarConnection = isCodeStarConnection;
/**
 * Default policy for the CodeBuild role generated.
 * It allows look-ups, including access to AWS Secrets Manager.
 * Not recommended for production. For production use case, CodeBuild policies
 * must be restricted to particular resources. Outbound access from the build should be
 * controlled by ACL.
 */
exports.DEFAULT_BUILD_POLICIES = [new aws_iam_1.PolicyStatement({
        resources: ["*"],
        actions: [
            "sts:AssumeRole",
            "secretsmanager:GetSecretValue",
            "secretsmanager:DescribeSecret",
            "cloudformation:*",
            "eks:DescribeAddonVersions"
        ]
    })];
/**
 * Builder for CodePipeline.
 */
class CodePipelineBuilder {
    constructor() {
        this.props = { crossAccountKeys: false, stages: [], waves: [] };
    }
    application(app) {
        this.props.application = app;
        return this;
    }
    name(name) {
        this.props.name = name;
        return this;
    }
    owner(owner) {
        this.props.owner = owner;
        return this;
    }
    /**
     * For production use cases, make sure all policies are tied to concrete resources.
     * @param policies
     * @returns
     */
    codeBuildPolicies(policies) {
        this.props.codeBuildPolicies = policies;
        return this;
    }
    enableCrossAccountKeys() {
        this.props.crossAccountKeys = true;
        return this;
    }
    repository(repo) {
        this.props.repository = repo;
        if (isCodeCommitRepo(repo)) {
            this.props.repository = repo;
        }
        if (isCodeStarConnection(repo)) {
            this.props.repository = repo;
        }
        return this;
    }
    /**
     * Adds standalone pipeline stages (in the order of invocation and elements in the input array)
     * @param stackStages
     * @returns
     */
    stage(...stackStages) {
        stackStages.forEach(stage => this.props.stages.push(stage));
        return this;
    }
    /**
     * Adds wave(s) in the order specified. All stages in the wave can be executed in parallel, while standalone stages are executed sequentially.
     * @param waves
     * @returns
     */
    wave(...waves) {
        waves.forEach(wave => {
            this.props.waves.push(wave);
            wave.stages.forEach(stage => { var _a; return (_a = this.props.stages) === null || _a === void 0 ? void 0 : _a.push({ ...stage, ...{ waveId: wave.id } }); });
        });
        return this;
    }
    build(scope, id, stackProps) {
        assert(this.props.name, 'name field is required for the pipeline stack. Please provide value.');
        assert(this.props.stages, 'Stage field is required for the pipeline stack. Please provide value.');
        if (this.props.repository) {
            let gitHubRepo = this.props.repository;
            if (!isCodeCommitRepo(this.props.repository)) {
                assert(this.props.owner || gitHubRepo.owner, 'repository.owner field is required for the GitHub or CodeStar connection pipeline stack. Please provide value.');
            }
        }
        const fullProps = this.props;
        return new CodePipelineStack(scope, fullProps, id, stackProps);
    }
}
exports.CodePipelineBuilder = CodePipelineBuilder;
/**
 * Pipeline stack is generating a self-mutating pipeline to faciliate full CI/CD experience with the platform
 * for infrastructure changes.
 */
class CodePipelineStack extends cdk.Stack {
    static builder() {
        return new CodePipelineBuilder();
    }
    constructor(scope, pipelineProps, id, props) {
        if (pipelineProps.crossAccountKeys) {
            super(scope, id, (0, usage_utils_1.withUsageTracking)(CodePipelineStack.USAGE_ID_MULTI_ACCOUNT, props));
        }
        else {
            super(scope, id, (0, usage_utils_1.withUsageTracking)(CodePipelineStack.USAGE_ID, props));
        }
        const pipeline = CodePipeline.build(this, pipelineProps);
        let promises = [];
        for (let stage of pipelineProps.stages) {
            const appStage = new ApplicationStage(this, stage.id, stage.stackBuilder);
            promises.push(appStage.waitForAsyncTasks());
        }
        Promise.all(promises).then(stages => {
            let currentWave;
            for (let i in stages) {
                const stage = pipelineProps.stages[i];
                if (stage.waveId) {
                    if (currentWave == null || currentWave.id != stage.waveId) {
                        const waveProps = pipelineProps.waves.find(wave => wave.id === stage.waveId);
                        assert(waveProps, `Specified wave ${stage.waveId} is not found in the pipeline definition ${id}`);
                        currentWave = pipeline.addWave(stage.waveId, { ...waveProps.props });
                    }
                    currentWave.addStage(stages[i], stage.stageProps);
                }
                else {
                    pipeline.addStage(stages[i], stage.stageProps);
                }
            }
        });
    }
}
exports.CodePipelineStack = CodePipelineStack;
CodePipelineStack.USAGE_ID = "qs-1s1r465k6";
CodePipelineStack.USAGE_ID_MULTI_ACCOUNT = "qs-1s1r465f2";
class ApplicationStage extends cdk.Stage {
    constructor(scope, id, builder, props) {
        super(scope, id, props);
        if (builder.buildAsync !== undefined) {
            this.asyncTask = builder.buildAsync(this, `${id}-blueprint`, props);
        }
        else {
            builder.build(this, `${id}-blueprint`, props);
        }
    }
    async waitForAsyncTasks() {
        if (this.asyncTask) {
            return this.asyncTask.then(() => {
                return this;
            });
        }
        return Promise.resolve(this);
    }
}
exports.ApplicationStage = ApplicationStage;
/**
 * CodePipeline deploys a new CodePipeline resource that is integrated with a GitHub repository.
 */
class CodePipeline {
    static build(scope, props) {
        var _a, _b, _c, _d, _e, _f, _g;
        let codePipelineSource = undefined;
        switch (true) {
            case isCodeCommitRepo(props.repository): {
                let codeCommitRepo = props.repository;
                codePipelineSource = cdkpipelines.CodePipelineSource.codeCommit(codecommit.Repository.fromRepositoryName(scope, 'cdk-eks-blueprints', codeCommitRepo.codeCommitRepoName), (_a = codeCommitRepo.targetRevision) !== null && _a !== void 0 ? _a : 'master', codeCommitRepo.codeCommitOptions);
                break;
            }
            case isCodeStarConnection(props.repository): {
                let codeStarConnection = props.repository;
                const repoOwner = (_b = codeStarConnection.owner) !== null && _b !== void 0 ? _b : props.owner;
                codePipelineSource = cdkpipelines.CodePipelineSource.connection(`${repoOwner}/${codeStarConnection.repoUrl}`, (_c = codeStarConnection.targetRevision) !== null && _c !== void 0 ? _c : 'main', { connectionArn: codeStarConnection.codeStarConnectionArn });
                break;
            }
            default: {
                let gitHubRepo = props.repository;
                let githubProps = {};
                const gitHubOwner = (_d = gitHubRepo.owner) !== null && _d !== void 0 ? _d : props.owner;
                if (gitHubRepo.credentialsSecretName) {
                    githubProps = {
                        authentication: cdk.SecretValue.secretsManager(gitHubRepo.credentialsSecretName),
                    };
                }
                codePipelineSource = cdkpipelines.CodePipelineSource.gitHub(`${gitHubOwner}/${gitHubRepo.repoUrl}`, (_e = gitHubRepo.targetRevision) !== null && _e !== void 0 ? _e : 'main', {
                    ...githubProps,
                    trigger: (_f = gitHubRepo.trigger) !== null && _f !== void 0 ? _f : aws_codepipeline_actions_1.GitHubTrigger.WEBHOOK,
                });
                break;
            }
        }
        const app = props.application ? `--app '${props.application}'` : "";
        const path = (_g = props.repository.path) !== null && _g !== void 0 ? _g : "./";
        return new cdkpipelines.CodePipeline(scope, props.name, {
            pipelineName: props.name,
            synth: new cdkpipelines.ShellStep(`${props.name}-synth`, {
                input: codePipelineSource,
                primaryOutputDirectory: `${path}/cdk.out`,
                installCommands: [
                    'n stable',
                    'npm install -g aws-cdk@2.133.0',
                    `cd $CODEBUILD_SRC_DIR/${path} && npm install`
                ],
                commands: [`cd $CODEBUILD_SRC_DIR/${path}`, 'npm run build', 'npx cdk synth ' + app]
            }),
            crossAccountKeys: props.crossAccountKeys,
            codeBuildDefaults: {
                rolePolicy: props.codeBuildPolicies
            },
        });
    }
}
//# sourceMappingURL=data:application/json;base64,