"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObservabilityBuilder = void 0;
const stacks_1 = require("../stacks");
const addons = require("../addons");
const utils = require("../utils");
const utils_1 = require("../utils");
const aws_cdk_lib_1 = require("aws-cdk-lib");
class ObservabilityBuilder extends stacks_1.BlueprintBuilder {
    constructor() {
        super(...arguments);
        this.coreDnsVersion = "auto";
        this.kubeProxyVersion = "auto";
    }
    /**
     * This method helps you prepare a blueprint for setting up observability
     * returning an array of blueprint addons for AWS native services
     */
    enableNativePatternAddOns() {
        return this.addOns(new addons.AwsLoadBalancerControllerAddOn(this.awsLoadbalancerProps), new addons.CertManagerAddOn(this.certManagerProps), new addons.CloudWatchInsights(this.cloudWatchInsightsAddOnProps), new addons.CoreDnsAddOn(this.coreDnsVersion, this.coreDnsProps), new addons.KubeProxyAddOn(this.kubeProxyVersion, this.kubeProxyProps), new addons.KubeStateMetricsAddOn(this.kubeStateMetricsProps), new addons.MetricsServerAddOn(this.metricsServerProps), new addons.PrometheusNodeExporterAddOn(this.prometheusNodeExporterProps));
    }
    /**
     * This method helps you prepare a blueprint for setting up observability
     * returning an array of blueprint addons for AWS Fargate services
     */
    enableFargatePatternAddOns() {
        return this.addOns(new addons.AwsLoadBalancerControllerAddOn(this.awsLoadbalancerProps), new addons.CertManagerAddOn(this.certManagerProps), new addons.AdotCollectorAddOn(this.adotCollectorProps), new addons.CoreDnsAddOn(this.coreDnsVersion, this.coreDnsProps), new addons.KubeProxyAddOn(this.kubeProxyVersion, this.kubeProxyProps), new addons.KubeStateMetricsAddOn(this.kubeStateMetricsProps), new addons.MetricsServerAddOn(this.metricsServerProps));
    }
    /**
     * This method helps you prepare a blueprint for setting up observability
     * returning an array of blueprint addons for combination of AWS native and
     * AWS managed open source services
     */
    enableMixedPatternAddOns() {
        return this.addOns(new addons.AwsLoadBalancerControllerAddOn(this.awsLoadbalancerProps), new addons.CertManagerAddOn(this.certManagerProps), new addons.AdotCollectorAddOn(this.adotCollectorProps), new addons.CoreDnsAddOn(this.coreDnsVersion, this.coreDnsProps), new addons.KubeProxyAddOn(this.kubeProxyVersion, this.kubeProxyProps), new addons.KubeStateMetricsAddOn(this.kubeStateMetricsProps), new addons.MetricsServerAddOn(this.metricsServerProps), new addons.PrometheusNodeExporterAddOn(this.prometheusNodeExporterProps));
    }
    /**
     * This method helps you prepare a blueprint for setting up observability
     * returning an array of blueprint addons for AWS managed open source services
     */
    enableOpenSourcePatternAddOns() {
        return this.addOns(new addons.AwsLoadBalancerControllerAddOn(this.awsLoadbalancerProps), new addons.CertManagerAddOn(this.certManagerProps), new addons.AdotCollectorAddOn(this.adotCollectorProps), new addons.AmpAddOn(this.ampProps), new addons.CoreDnsAddOn(this.coreDnsVersion, this.coreDnsProps), new addons.ExternalsSecretsAddOn(this.externalSecretProps), new addons.GrafanaOperatorAddon(this.grafanaOperatorProps), new addons.KubeProxyAddOn(this.kubeProxyVersion, this.kubeProxyProps), new addons.KubeStateMetricsAddOn(this.kubeStateMetricsProps), new addons.MetricsServerAddOn(this.metricsServerProps), new addons.PrometheusNodeExporterAddOn(this.prometheusNodeExporterProps));
    }
    /**
     * Enables control plane logging.
     * Enabling control plane logging is an in-place change for EKS as inferred from
     * https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html
     *
     * @returns {ObservabilityBuilder} - The ObservabilityBuilder instance with control plane logging enabled.
     */
    enableControlPlaneLogging() {
        return this.enableControlPlaneLogTypes(stacks_1.ControlPlaneLogType.API, stacks_1.ControlPlaneLogType.AUDIT, stacks_1.ControlPlaneLogType.AUTHENTICATOR, stacks_1.ControlPlaneLogType.CONTROLLER_MANAGER, stacks_1.ControlPlaneLogType.SCHEDULER);
    }
    withAwsLoadBalancerControllerProps(props) {
        this.awsLoadbalancerProps = { ...this.awsLoadbalancerProps, ...(0, utils_1.cloneDeep)(props) };
        return this;
    }
    withCertManagerProps(props) {
        this.certManagerProps = { ...this.certManagerProps, ...(0, utils_1.cloneDeep)(props) };
        return this;
    }
    withCloudWatchInsightsProps(props) {
        this.cloudWatchInsightsAddOnProps = { ...this.cloudWatchInsightsAddOnProps, ...(0, utils_1.cloneDeep)(props) };
        return this;
    }
    withCoreDnsProps(props) {
        this.coreDnsProps = { ...this.coreDnsProps, ...(0, utils_1.cloneDeep)(props) };
        return this;
    }
    withKubeProxyProps(props, version) {
        this.kubeProxyProps = { ...this.kubeProxyProps, ...(0, utils_1.cloneDeep)(props) };
        this.kubeProxyVersion = version;
        return this;
    }
    withKubeStateMetricsProps(props) {
        this.kubeStateMetricsProps = { ...this.kubeStateMetricsProps, ...(0, utils_1.cloneDeep)(props) };
        return this;
    }
    withMetricsServerProps(props) {
        this.metricsServerProps = { ...this.metricsServerProps, ...(0, utils_1.cloneDeep)(props) };
        return this;
    }
    withPrometheusNodeExporterProps(props) {
        this.prometheusNodeExporterProps = { ...this.prometheusNodeExporterProps, ...(0, utils_1.cloneDeep)(props) };
        return this;
    }
    withAdotCollectorProps(props) {
        this.adotCollectorProps = { ...this.adotCollectorProps, ...(0, utils_1.cloneDeep)(props) };
        return this;
    }
    withExternalSecretsProps(props) {
        this.externalSecretProps = { ...this.externalSecretProps, ...(0, utils_1.cloneDeep)(props) };
        return this;
    }
    withGrafanaOperatorProps(props) {
        this.grafanaOperatorProps = { ...this.grafanaOperatorProps, ...(0, utils_1.cloneDeep)(props) };
        return this;
    }
    withAmpProps(props) {
        this.ampProps = { ...this.ampProps, ...(0, utils_1.cloneDeep)(props) };
        return this;
    }
    /**
     * This method helps you prepare a blueprint for setting up observability with
     * usage tracking addon
     */
    static builder() {
        const builder = new ObservabilityBuilder();
        builder.addOns(new addons.NestedStackAddOn({
            id: "usage-tracking-addon",
            builder: UsageTrackingAddOn.builder(),
        }));
        return builder;
    }
}
exports.ObservabilityBuilder = ObservabilityBuilder;
/**
 * Nested stack that is used as tracker for Observability Accelerator
 */
class UsageTrackingAddOn extends aws_cdk_lib_1.NestedStack {
    static builder() {
        return {
            build(scope, id, props) {
                return new UsageTrackingAddOn(scope, id, props);
            }
        };
    }
    constructor(scope, id, props) {
        super(scope, id, utils.withUsageTracking(UsageTrackingAddOn.USAGE_ID, props));
    }
}
UsageTrackingAddOn.USAGE_ID = "qs-1u9l12gj7";
//# sourceMappingURL=data:application/json;base64,