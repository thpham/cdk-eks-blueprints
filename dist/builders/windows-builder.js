"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WindowsBuilder = void 0;
const stacks_1 = require("../stacks");
const addons = require("../addons");
const utils = require("../utils");
const clusterproviders = require("../cluster-providers");
const resourceproviders = require("../resource-providers");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const eks = require("aws-cdk-lib/aws-eks");
const ec2 = require("aws-cdk-lib/aws-ec2");
const iam = require("aws-cdk-lib/aws-iam");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const ts_deepmerge_1 = require("ts-deepmerge");
/**
 * Default props to be used when creating the non-windows and windows nodes
 * for Windows EKS cluster
 */
const defaultOptions = {
    kubernetesVersion: eks.KubernetesVersion.of("1.28"),
    instanceClass: ec2.InstanceClass.M5,
    instanceSize: ec2.InstanceSize.XLARGE4,
    nodeRole: resourceproviders.getNamedResource("node-role"),
    windowsAmiType: aws_eks_1.NodegroupAmiType.WINDOWS_FULL_2022_X86_64,
    desiredNodeCount: 2,
    minNodeSize: 2,
    maxNodeSize: 3,
    blockDeviceSize: 50,
    noScheduleForWindowsNodes: true,
    clusterProviderTags: {
        "Name": "blueprints-windows-eks-cluster",
        "Type": "generic-windows-cluster"
    },
    genericNodeGroupOptions: {
        nodegroupName: "default-linux",
        tags: {
            "Name": "Mng-linux",
            "Type": "Managed-linux-Node-Group",
            "LaunchTemplate": "Linux-Launch-Template",
        }
    },
    windowsNodeGroupOptions: {
        nodegroupName: "default-windows",
        amiType: aws_eks_1.NodegroupAmiType.WINDOWS_CORE_2022_X86_64,
        tags: {
            "Name": "Managed-Node-Group",
            "Type": "Windows-Node-Group",
            "LaunchTemplate": "WindowsLT",
            "kubernetes.io/cluster/windows-eks-blueprint": "owned"
        }
    }
};
/**
 * This builder class helps you prepare a blueprint for setting up
 * windows nodes with EKS cluster. The `WindowsBuilder` creates the following:
 * 1. An EKS Cluster` with passed k8s version and cluster tags.
 * 2. A non-windows nodegroup for standard software.
 * 3. A windows nodegroup to schedule windows workloads
 */
class WindowsBuilder extends stacks_1.BlueprintBuilder {
    /**
     * This method helps you prepare a blueprint for setting up windows nodes with
     * usage tracking addon
     */
    static builder(options) {
        const builder = new WindowsBuilder();
        const mergedOptions = (0, ts_deepmerge_1.merge)(defaultOptions, options);
        builder
            .clusterProvider(new clusterproviders.GenericClusterProvider({
            version: mergedOptions.kubernetesVersion,
            tags: mergedOptions.clusterProviderTags,
            role: resourceproviders.getResource(context => {
                return new iam.Role(context.scope, 'ClusterRole', {
                    assumedBy: new iam.ServicePrincipal("eks.amazonaws.com"),
                    managedPolicies: [
                        iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEKSClusterPolicy"),
                        iam.ManagedPolicy.fromAwsManagedPolicyName("AmazonEKSVPCResourceController")
                    ]
                });
            }),
            managedNodeGroups: [
                buildGenericNodeGroup(mergedOptions),
                buildWindowsNodeGroup(mergedOptions)
            ]
        }))
            .addOns(new addons.NestedStackAddOn({
            id: "usage-tracking-addon",
            builder: UsageTrackingAddOn.builder(),
        }));
        return builder;
    }
    enableKarpenter() {
        return this.addOns(new addons.KarpenterAddOn(this.karpenterProps));
    }
    withKarpenterProps(props) {
        this.karpenterProps = { ...this.karpenterProps, ...utils.cloneDeep(props) };
        return this;
    }
}
exports.WindowsBuilder = WindowsBuilder;
/**
 * Nested stack that is used as tracker for Windows Accelerator
 */
class UsageTrackingAddOn extends aws_cdk_lib_1.NestedStack {
    static builder() {
        return {
            build(scope, id, props) {
                return new UsageTrackingAddOn(scope, id, props);
            }
        };
    }
    constructor(scope, id, props) {
        super(scope, id, utils.withUsageTracking(UsageTrackingAddOn.USAGE_ID, props));
    }
}
UsageTrackingAddOn.USAGE_ID = "qs-1ubotj5kl";
/**
 *  Return the instanceType based off nodegroup or if not defined from options instanceClass and instanceSize. Default to m5.4xlarge
 * @param nodegroupOptions To override instanceType return
 * @param nodegroup default cluster level settings
 * @returns clusterprovider.ManagedNodeGroup
 */
function getInstanceType(nodegroupOptions, windowsOptions) {
    if (nodegroupOptions.instanceTypes) {
        return nodegroupOptions.instanceTypes;
    }
    if (windowsOptions.instanceClass && windowsOptions.instanceSize)
        return [new ec2.InstanceType(`${windowsOptions.instanceClass}.${windowsOptions.instanceSize}`)];
    return [new ec2.InstanceType('m5.4xlarge')];
}
/**
 * This function adds a generic node group to the cluster.
 * @param: options: WindowsOptions
 * @returns: blueprints.ManagedNodeGroup
 */
function buildGenericNodeGroup(options, overrideOptions) {
    let currentOptions = options.genericNodeGroupOptions;
    if (overrideOptions) {
        currentOptions = (0, ts_deepmerge_1.merge)(options.genericNodeGroupOptions, overrideOptions);
    }
    return {
        id: currentOptions.nodegroupName || "",
        amiType: currentOptions.amiType,
        instanceTypes: getInstanceType(currentOptions, options),
        desiredSize: currentOptions.desiredSize,
        minSize: currentOptions.minSize,
        maxSize: currentOptions.maxSize,
        nodeRole: currentOptions.nodeRole,
        nodeGroupSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
        tags: currentOptions.tags,
    };
}
/**
 * This function adds a windows node group to the cluster.
 * @param options: WindowsOptions
 * @returns: blueprints.ManagedNodeGroup
 */
function buildWindowsNodeGroup(options) {
    const result = buildGenericNodeGroup(options, options.windowsNodeGroupOptions);
    if (options.noScheduleForWindowsNodes) {
        utils.setPath(result, "taints", [
            {
                key: "os",
                value: "windows",
                effect: eks.TaintEffect.NO_SCHEDULE
            }
        ]);
    }
    return result;
}
//# sourceMappingURL=data:application/json;base64,