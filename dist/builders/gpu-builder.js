"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GpuBuilder = void 0;
const stacks_1 = require("../stacks");
const addons = require("../addons");
const utils = require("../utils");
const clusterproviders = require("../cluster-providers");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const eks = require("aws-cdk-lib/aws-eks");
const ec2 = require("aws-cdk-lib/aws-ec2");
const aws_eks_1 = require("aws-cdk-lib/aws-eks");
const ts_deepmerge_1 = require("ts-deepmerge");
/**
 * Default props to be used when creating the GPU nodes
 * for EKS cluster
 */
const defaultOptions = {
    kubernetesVersion: eks.KubernetesVersion.of("1.28"),
    instanceClass: ec2.InstanceClass.G5,
    instanceSize: ec2.InstanceSize.XLARGE,
    desiredNodeSize: 2,
    minNodeSize: 2,
    maxNodeSize: 3,
    blockDeviceSize: 50,
    clusterProviderTags: {
        "Name": "blueprints-gpu-eks-cluster",
        "Type": "generic-gpu-cluster"
    },
    nodeGroupTags: {
        "Name": "Mng-linux-Gpu",
        "Type": "Managed-linux-Gpu-Node-Group",
        "LaunchTemplate": "Linux-Launch-Template",
    }
};
class GpuBuilder extends stacks_1.BlueprintBuilder {
    /**
     * This method helps you prepare a blueprint for setting up observability
     * returning an array of blueprint addons for AWS managed open source services
     */
    enableGpu(values) {
        return this.addOns(new addons.AwsLoadBalancerControllerAddOn(), new addons.CertManagerAddOn(), new addons.CoreDnsAddOn(), new addons.KubeProxyAddOn(), new addons.VpcCniAddOn(), new addons.GpuOperatorAddon({ values }));
    }
    /**
    * This method helps you prepare a blueprint for setting up windows nodes with
    * usage tracking addon
    */
    static builder(options) {
        const builder = new GpuBuilder();
        const mergedOptions = (0, ts_deepmerge_1.merge)(defaultOptions, options);
        builder
            .clusterProvider(new clusterproviders.GenericClusterProvider({
            version: mergedOptions.kubernetesVersion,
            tags: mergedOptions.clusterProviderTags,
            managedNodeGroups: [
                addGpuNodeGroup(mergedOptions),
            ]
        }))
            .addOns(new addons.NestedStackAddOn({
            id: "usage-tracking-addon",
            builder: UsageTrackingAddOn.builder(),
        }));
        return builder;
    }
}
exports.GpuBuilder = GpuBuilder;
/**
 * Nested stack that is used as tracker for GPU Accelerator
 */
class UsageTrackingAddOn extends aws_cdk_lib_1.NestedStack {
    static builder() {
        return {
            build(scope, id, props) {
                return new UsageTrackingAddOn(scope, id, props);
            }
        };
    }
    constructor(scope, id, props) {
        super(scope, id, utils.withUsageTracking(UsageTrackingAddOn.USAGE_ID, props));
    }
}
UsageTrackingAddOn.USAGE_ID = "qs-1ug68anj6";
/**
 * This function adds a GPU node group to the cluster.
 * @param: options: GpuOptions
 * @returns: blueprints.ManagedNodeGroup
 */
function addGpuNodeGroup(options) {
    return {
        id: "mng-linux-gpu-01",
        amiType: aws_eks_1.NodegroupAmiType.AL2_X86_64_GPU,
        instanceTypes: [new ec2.InstanceType(`${options.instanceClass}.${options.instanceSize}`)],
        desiredSize: options.desiredNodeSize,
        minSize: options.minNodeSize,
        maxSize: options.maxNodeSize,
        nodeGroupSubnets: { subnetType: ec2.SubnetType.PRIVATE_WITH_EGRESS },
        launchTemplate: {
            tags: options.nodeGroupTags,
            requireImdsv2: false,
            blockDevices: [
                {
                    deviceName: "/dev/sda1",
                    volume: ec2.BlockDeviceVolume.ebs(options.blockDeviceSize),
                }
            ]
        }
    };
}
//# sourceMappingURL=data:application/json;base64,