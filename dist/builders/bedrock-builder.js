"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BedrockBuilder = void 0;
const stacks_1 = require("../stacks");
const utils = require("../utils");
const addons = require("../addons");
const teams = require("../teams");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const utils_1 = require("../utils");
class BedrockBuilder extends stacks_1.BlueprintBuilder {
    /* This method helps you add a bedrock team to the blueprint.
    */
    addBedrockTeam(props) {
        return this.teams(new teams.BedrockTeam((0, utils_1.cloneDeep)(props)));
    }
    /**
     * This method helps you prepare a blueprint for setting up EKS cluster with
     * usage tracking addon
     */
    static builder() {
        const builder = new BedrockBuilder();
        builder.addOns(new addons.NestedStackAddOn({
            id: "usage-tracking-addon",
            builder: UsageTrackingAddOn.builder(),
        }), new addons.AwsLoadBalancerControllerAddOn(), new addons.CoreDnsAddOn(), new addons.CertManagerAddOn(), new addons.KubeStateMetricsAddOn(), new addons.KubeProxyAddOn(), new addons.MetricsServerAddOn(), new addons.SSMAgentAddOn(), new addons.VpcCniAddOn());
        return builder;
    }
}
exports.BedrockBuilder = BedrockBuilder;
/**
 * Nested stack that is used as tracker
 */
class UsageTrackingAddOn extends aws_cdk_lib_1.NestedStack {
    static builder() {
        return {
            build(scope, id, props) {
                return new UsageTrackingAddOn(scope, id, props);
            }
        };
    }
    constructor(scope, id, props) {
        super(scope, id, utils.withUsageTracking(UsageTrackingAddOn.USAGE_ID, props));
    }
}
UsageTrackingAddOn.USAGE_ID = "qs-1uijcfop9";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmVkcm9jay1idWlsZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2J1aWxkZXJzL2JlZHJvY2stYnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxzQ0FBNkM7QUFDN0Msa0NBQWtDO0FBQ2xDLG9DQUFvQztBQUNwQyxrQ0FBa0M7QUFFbEMsNkNBQTREO0FBRTVELG9DQUFxQztBQUVyQyxNQUFhLGNBQWUsU0FBUSx5QkFBZ0I7SUFFaEQ7TUFDRTtJQUNLLGNBQWMsQ0FBQyxLQUE2QjtRQUMvQyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUEsaUJBQVMsRUFBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxPQUFPO1FBQ2pCLE1BQU0sT0FBTyxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7UUFFckMsT0FBTyxDQUFDLE1BQU0sQ0FDVixJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztZQUN4QixFQUFFLEVBQUUsc0JBQXNCO1lBQzFCLE9BQU8sRUFBRSxrQkFBa0IsQ0FBQyxPQUFPLEVBQUU7U0FDeEMsQ0FBQyxFQUNGLElBQUksTUFBTSxDQUFDLDhCQUE4QixFQUFFLEVBQzNDLElBQUksTUFBTSxDQUFDLFlBQVksRUFBRSxFQUN6QixJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxFQUM3QixJQUFJLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxFQUNsQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUUsRUFDM0IsSUFBSSxNQUFNLENBQUMsa0JBQWtCLEVBQUUsRUFDL0IsSUFBSSxNQUFNLENBQUMsYUFBYSxFQUFFLEVBQzFCLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxDQUMzQixDQUFDO1FBQ0YsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztDQUNKO0FBL0JELHdDQStCQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxrQkFBbUIsU0FBUSx5QkFBVztJQUlqQyxNQUFNLENBQUMsT0FBTztRQUNqQixPQUFPO1lBQ0gsS0FBSyxDQUFDLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXVCO2dCQUN2RCxPQUFPLElBQUksa0JBQWtCLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNwRCxDQUFDO1NBQ0osQ0FBQztJQUNOLENBQUM7SUFFRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQXVCO1FBQzdELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNsRixDQUFDOztBQVplLDJCQUFRLEdBQUcsY0FBYyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmx1ZXByaW50QnVpbGRlciB9IGZyb20gJy4uL3N0YWNrcyc7XG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwiLi4vdXRpbHNcIjtcbmltcG9ydCAqIGFzIGFkZG9ucyBmcm9tICcuLi9hZGRvbnMnO1xuaW1wb3J0ICogYXMgdGVhbXMgZnJvbSAnLi4vdGVhbXMnO1xuaW1wb3J0ICogYXMgc3BpIGZyb20gJy4uL3NwaSc7XG5pbXBvcnQgeyBOZXN0ZWRTdGFjaywgTmVzdGVkU3RhY2tQcm9wcyB9IGZyb20gJ2F3cy1jZGstbGliJztcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xuaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnLi4vdXRpbHMnO1xuXG5leHBvcnQgY2xhc3MgQmVkcm9ja0J1aWxkZXIgZXh0ZW5kcyBCbHVlcHJpbnRCdWlsZGVyIHtcblxuICAgIC8qIFRoaXMgbWV0aG9kIGhlbHBzIHlvdSBhZGQgYSBiZWRyb2NrIHRlYW0gdG8gdGhlIGJsdWVwcmludC5cbiAgICAqLyBcbiAgICBwdWJsaWMgYWRkQmVkcm9ja1RlYW0ocHJvcHM6IHRlYW1zLkJlZHJvY2tUZWFtUHJvcHMpIDogdGhpcyB7XG4gICAgICAgIHJldHVybiB0aGlzLnRlYW1zKG5ldyB0ZWFtcy5CZWRyb2NrVGVhbShjbG9uZURlZXAocHJvcHMpKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaGVscHMgeW91IHByZXBhcmUgYSBibHVlcHJpbnQgZm9yIHNldHRpbmcgdXAgRUtTIGNsdXN0ZXIgd2l0aCBcbiAgICAgKiB1c2FnZSB0cmFja2luZyBhZGRvblxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgYnVpbGRlcigpOiBCZWRyb2NrQnVpbGRlciB7XG4gICAgICAgIGNvbnN0IGJ1aWxkZXIgPSBuZXcgQmVkcm9ja0J1aWxkZXIoKTtcblxuICAgICAgICBidWlsZGVyLmFkZE9ucyhcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuTmVzdGVkU3RhY2tBZGRPbih7XG4gICAgICAgICAgICAgICAgaWQ6IFwidXNhZ2UtdHJhY2tpbmctYWRkb25cIixcbiAgICAgICAgICAgICAgICBidWlsZGVyOiBVc2FnZVRyYWNraW5nQWRkT24uYnVpbGRlcigpLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICBuZXcgYWRkb25zLkF3c0xvYWRCYWxhbmNlckNvbnRyb2xsZXJBZGRPbigpLFxuICAgICAgICAgICAgbmV3IGFkZG9ucy5Db3JlRG5zQWRkT24oKSxcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuQ2VydE1hbmFnZXJBZGRPbigpLFxuICAgICAgICAgICAgbmV3IGFkZG9ucy5LdWJlU3RhdGVNZXRyaWNzQWRkT24oKSxcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuS3ViZVByb3h5QWRkT24oKSxcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuTWV0cmljc1NlcnZlckFkZE9uKCksXG4gICAgICAgICAgICBuZXcgYWRkb25zLlNTTUFnZW50QWRkT24oKSxcbiAgICAgICAgICAgIG5ldyBhZGRvbnMuVnBjQ25pQWRkT24oKSxcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGJ1aWxkZXI7XG4gICAgfVxufVxuXG4vKipcbiAqIE5lc3RlZCBzdGFjayB0aGF0IGlzIHVzZWQgYXMgdHJhY2tlclxuICovXG5jbGFzcyBVc2FnZVRyYWNraW5nQWRkT24gZXh0ZW5kcyBOZXN0ZWRTdGFjayB7XG5cbiAgICBzdGF0aWMgcmVhZG9ubHkgVVNBR0VfSUQgPSBcInFzLTF1aWpjZm9wOVwiO1xuXG4gICAgcHVibGljIHN0YXRpYyBidWlsZGVyKCk6IHNwaS5OZXN0ZWRTdGFja0J1aWxkZXIge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYnVpbGQoc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IE5lc3RlZFN0YWNrUHJvcHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVzYWdlVHJhY2tpbmdBZGRPbihzY29wZSwgaWQsIHByb3BzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogTmVzdGVkU3RhY2tQcm9wcykge1xuICAgICAgICBzdXBlcihzY29wZSwgaWQsIHV0aWxzLndpdGhVc2FnZVRyYWNraW5nKFVzYWdlVHJhY2tpbmdBZGRPbi5VU0FHRV9JRCwgcHJvcHMpKTtcbiAgICB9XG59Il19