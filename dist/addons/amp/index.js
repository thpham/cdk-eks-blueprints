"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmpAddOn = void 0;
const utils_1 = require("../../utils");
const adot_1 = require("../adot");
const kubectl_provider_1 = require("../helm-addon/kubectl-provider");
const aws_aps_1 = require("aws-cdk-lib/aws-aps");
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    deploymentMode: "deployment" /* DeploymentMode.DEPLOYMENT */,
    name: 'adot-collector-amp',
    namespace: 'default',
    enableAPIserverJob: false
};
/**
 * Implementation of AMP add-on for EKS Blueprints. Installs ADOT Collector.
 */
let AmpAddOn = class AmpAddOn {
    constructor(props) {
        this.ampAddOnProps = { ...defaultProps, ...props };
    }
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        let doc;
        // Applying manifest for configuring ADOT Collector for Amp.
        if (this.ampAddOnProps.deploymentMode == "daemonset" /* DeploymentMode.DAEMONSET */) {
            doc = (0, utils_1.readYamlDocument)(__dirname + '/collector-config-amp-daemonset.ytpl');
        }
        else {
            doc = (0, utils_1.readYamlDocument)(__dirname + '/collector-config-amp.ytpl');
        }
        doc = (0, utils_1.changeTextBetweenTokens)(doc, "{{ if enableAPIserverJob }}", "{{ end }}", this.ampAddOnProps.enableAPIServerJob);
        const manifest = doc.split("---").map(e => {
            var _a;
            let object = (0, utils_1.loadYaml)(e);
            if (((_a = this.ampAddOnProps.openTelemetryCollector) === null || _a === void 0 ? void 0 : _a.manifestPath) !== undefined && object.kind === "OpenTelemetryCollector") {
                object = (0, utils_1.readYamlDocument)(this.ampAddOnProps.openTelemetryCollector.manifestPath);
                object = (0, utils_1.loadYaml)(object);
            }
            return object;
        });
        const attrPrometheusEndpoint = this.ampAddOnProps.ampPrometheusEndpoint + 'api/v1/remote_write';
        const values = {
            remoteWriteEndpoint: attrPrometheusEndpoint,
            awsRegion: cluster.stack.region,
            deploymentMode: this.ampAddOnProps.deploymentMode,
            namespace: this.ampAddOnProps.namespace,
            clusterName: cluster.clusterName,
            ...(_a = this.ampAddOnProps.openTelemetryCollector) === null || _a === void 0 ? void 0 : _a.manifestParameterMap
        };
        const manifestDeployment = {
            name: this.ampAddOnProps.name,
            namespace: this.ampAddOnProps.namespace,
            manifest,
            values
        };
        const kubectlProvider = new kubectl_provider_1.KubectlProvider(clusterInfo);
        const statement = kubectlProvider.addManifest(manifestDeployment);
        const ampRules = this.ampAddOnProps.ampRules;
        if (ampRules !== undefined) {
            const ruleGroupsNamespaces = this.configureRules(cluster, ampRules.ruleFilePaths, ampRules.ampWorkspaceArn);
            statement.node.addDependency(ruleGroupsNamespaces.at(-1));
        }
        return Promise.resolve(statement);
    }
    configureRules(cluster, ruleFilePaths, ampWorkspaceArn) {
        const ruleGroupsNamespaces = [];
        if (ruleFilePaths.length == 0) {
            throw new Error("No paths defined for AMP rules");
        }
        ruleFilePaths.map((ruleFilePath, index) => {
            const ruleGroupsNamespace = new aws_aps_1.CfnRuleGroupsNamespace(cluster, "AmpRulesConfigurator-" + index, {
                data: (0, utils_1.readYamlDocument)(ruleFilePath),
                name: "AmpRulesConfigurator-" + index,
                workspace: ampWorkspaceArn
            });
            if (index > 0) {
                ruleGroupsNamespace.node.addDependency(ruleGroupsNamespaces.at(-1));
            }
            ruleGroupsNamespaces.push(ruleGroupsNamespace);
        });
        return ruleGroupsNamespaces;
    }
};
exports.AmpAddOn = AmpAddOn;
__decorate([
    (0, utils_1.dependable)(adot_1.AdotCollectorAddOn.name)
], AmpAddOn.prototype, "deploy", null);
exports.AmpAddOn = AmpAddOn = __decorate([
    utils_1.supportsALL
], AmpAddOn);
//# sourceMappingURL=data:application/json;base64,