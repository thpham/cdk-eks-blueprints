"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FluxCDAddOn = void 0;
const ts_deepmerge_1 = require("ts-deepmerge");
const utils_1 = require("../../utils");
const helm_addon_1 = require("../helm-addon");
const gitrepository_1 = require("./gitrepository");
const kustomization_1 = require("./kustomization");
/**
 * Default props to be used when creating the Helm chart
 */
const defaultProps = {
    name: "fluxcd-addon",
    namespace: "flux-system",
    chart: "flux2",
    version: "2.12.4",
    release: "blueprints-fluxcd-addon",
    repository: "https://fluxcd-community.github.io/helm-charts",
    values: {},
    createNamespace: true,
};
const defaultRepoProps = {
    syncInterval: "5m0s",
};
const defaultKustomiationProps = {
    kustomizationPath: ".",
    syncInterval: "5m0s",
    prune: true,
    timeout: "1m",
};
/**
 * Main class to instantiate the Helm chart
 */
let FluxCDAddOn = class FluxCDAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a, _b;
        const cluster = clusterInfo.cluster;
        let values = (_a = this.options.values) !== null && _a !== void 0 ? _a : {};
        values = (0, ts_deepmerge_1.merge)(values, (_b = this.props.values) !== null && _b !== void 0 ? _b : {});
        const chart = this.addHelmChart(clusterInfo, values);
        if (this.options.createNamespace == true) {
            // Let CDK Create the Namespace
            const namespace = (0, utils_1.createNamespace)(this.options.namespace, cluster);
            chart.node.addDependency(namespace);
        }
        //Create GitRepository sources and Kustomizations
        if (this.options.repositories) {
            this.options.repositories.map((repo) => {
                repo = { ...defaultRepoProps, ...repo };
                const gitRepositoryConstruct = createGitRepository(clusterInfo, this.options.name, this.options.namespace, repo);
                gitRepositoryConstruct.node.addDependency(chart);
                const kustomizationConstructs = createKustomizations(clusterInfo, this.options.name, this.options.namespace, repo);
                kustomizationConstructs.map(kustomizationConstruct => kustomizationConstruct.node.addDependency(gitRepositoryConstruct));
            });
        }
        return Promise.resolve(chart);
    }
};
exports.FluxCDAddOn = FluxCDAddOn;
exports.FluxCDAddOn = FluxCDAddOn = __decorate([
    utils_1.supportsALL
], FluxCDAddOn);
/**
 * create GitRepository calls the FluxGitRepository().generate to create GitRepostory resource.
 */
function createGitRepository(clusterInfo, name, namespace, fluxGitRepo) {
    var _a;
    if (fluxGitRepo.repository === undefined) {
        throw new Error("Missing Git repository");
    }
    const manifest = new gitrepository_1.FluxGitRepository(fluxGitRepo.repository).generate(fluxGitRepo.name, (_a = fluxGitRepo.namespace) !== null && _a !== void 0 ? _a : namespace, fluxGitRepo.syncInterval, fluxGitRepo.secretRefName);
    let manifestName = name + 'gitrepository' + fluxGitRepo.name;
    const construct = clusterInfo.cluster.addManifest(manifestName, manifest);
    return construct;
}
/**
 * create Kustomizations calls the FluxKustomization().generate multiple times to create Kustomization resources.
 */
function createKustomizations(clusterInfo, name, namespace, fluxGitRepo) {
    var _a;
    const constructs = [];
    const kustomizations = (_a = fluxGitRepo.kustomizations) !== null && _a !== void 0 ? _a : [{ kustomizationPath: "." }];
    const fluxKustomization = new kustomization_1.FluxKustomization();
    kustomizations === null || kustomizations === void 0 ? void 0 : kustomizations.map((kustomization, index) => {
        var _a;
        kustomization = { ...defaultKustomiationProps, ...kustomization };
        const manifest = fluxKustomization.generate(fluxGitRepo.name + "-" + index, fluxGitRepo.name, (_a = fluxGitRepo.namespace) !== null && _a !== void 0 ? _a : namespace, kustomization.syncInterval, kustomization.prune, kustomization.timeout, fluxGitRepo.values, kustomization.kustomizationPath, kustomization.kustomizationTargetNamespace);
        let manifestName = name + 'kustomization' + fluxGitRepo.name + index;
        constructs.push(clusterInfo.cluster.addManifest(manifestName, manifest));
    });
    return constructs;
}
//# sourceMappingURL=data:application/json;base64,