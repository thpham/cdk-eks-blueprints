"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serviceMappings = exports.AckServiceName = void 0;
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
/**
 * List of all supported supported AWS services by ACK Addon.
 */
var AckServiceName;
(function (AckServiceName) {
    AckServiceName["ACM"] = "acm";
    AckServiceName["ACMPCA"] = "acmpca";
    AckServiceName["APIGATEWAYV2"] = "apigatewayv2";
    AckServiceName["APPLICATIONAUTOSCALING"] = "applicationautoscaling";
    AckServiceName["CLOUDTRAIL"] = "cloudtrail";
    AckServiceName["CLOUDWATCH"] = "cloudwatch";
    AckServiceName["CLOUDWATCHLOGS"] = "cloudwatchlogs";
    AckServiceName["DYNAMODB"] = "dynamodb";
    AckServiceName["EC2"] = "ec2";
    AckServiceName["ECR"] = "ecr";
    AckServiceName["EKS"] = "eks";
    AckServiceName["ELASTICACHE"] = "elasticache";
    AckServiceName["ELASTICSEARCHSERVICE"] = "elasticsearchservice";
    AckServiceName["EMRCONTAINERS"] = "emrcontainers";
    AckServiceName["EVENTBRIDGE"] = "eventbridge";
    AckServiceName["IAM"] = "iam";
    AckServiceName["KAFKA"] = "kafka";
    AckServiceName["KINESIS"] = "kinesis";
    AckServiceName["KMS"] = "kms";
    AckServiceName["LAMBDA"] = "lambda";
    AckServiceName["MEMORYDB"] = "memorydb";
    AckServiceName["MQ"] = "mq";
    AckServiceName["OPENSEARCHSERVICE"] = "opensearchservice";
    AckServiceName["PIPES"] = "pipes";
    AckServiceName["PROMETHEUSSERVICE"] = "prometheusservice";
    AckServiceName["RDS"] = "rds";
    AckServiceName["ROUTE53"] = "route53";
    AckServiceName["ROUTE53RESOLVER"] = "route53resolver";
    AckServiceName["S3"] = "s3";
    AckServiceName["SAGEMAKER"] = "sagemaker";
    AckServiceName["SECRETSMANAGER"] = "secretsmanager";
    AckServiceName["SFN"] = "sfn";
    AckServiceName["SNS"] = "sns";
    AckServiceName["SQS"] = "sqs";
})(AckServiceName || (exports.AckServiceName = AckServiceName = {}));
/**
 * List of all Service Mappings such as chart, version, managed IAM policy
 * for all supported AWS services by ACK Addon.
 */
exports.serviceMappings = {
    [AckServiceName.IAM]: {
        chart: "iam-chart",
        version: "1.3.1",
        managedPolicyName: "IAMFullAccess"
    },
    [AckServiceName.RDS]: {
        chart: "rds-chart",
        version: "1.1.8",
        managedPolicyName: "AmazonRDSFullAccess"
    },
    [AckServiceName.EC2]: {
        chart: "ec2-chart",
        version: "1.1.0",
        managedPolicyName: "AmazonRDSFullAccess"
    },
    [AckServiceName.S3]: {
        chart: "s3-chart",
        version: "1.0.6",
        managedPolicyName: "AmazonS3FullAccess"
    },
    [AckServiceName.DYNAMODB]: {
        chart: "dynamodb-chart",
        version: "1.2.5",
        managedPolicyName: "AmazonDynamoDBFullAccess"
    },
    [AckServiceName.ECR]: {
        chart: "ecr-chart",
        version: "1.0.9",
        managedPolicyName: "AmazonEC2ContainerRegistryFullAccess"
    },
    [AckServiceName.SNS]: {
        chart: "sns-chart",
        version: "1.0.5",
        managedPolicyName: "AmazonSNSFullAccess"
    },
    [AckServiceName.APIGATEWAYV2]: {
        chart: "apigatewayv2-chart",
        version: "1.0.6",
        managedPolicyName: "AmazonAPIGatewayAdministrator"
    },
    [AckServiceName.ELASTICACHE]: {
        chart: "elasticache-chart",
        version: "0.0.28",
        managedPolicyName: "AmazonElastiCacheFullAccess"
    },
    [AckServiceName.OPENSEARCHSERVICE]: {
        chart: "opensearchservice-chart",
        version: "0.0.18",
        managedPolicyName: "AmazonOpenSearchServiceFullAccess"
    },
    [AckServiceName.MQ]: {
        chart: "mq-chart",
        version: "0.0.28",
        managedPolicyName: "AmazonMQFullAccess"
    },
    [AckServiceName.LAMBDA]: {
        chart: "lambda-chart",
        version: "1.3.4",
        managedPolicyName: "AWSLambda_FullAccess"
    },
    [AckServiceName.KMS]: {
        chart: "kms-chart",
        version: "1.0.7",
        managedPolicyName: "AWSKeyManagementServicePowerUser"
    },
    [AckServiceName.MEMORYDB]: {
        chart: "memorydb-chart",
        version: "1.0.2",
        managedPolicyName: "AmazonMemoryDBFullAccess"
    },
    [AckServiceName.EKS]: {
        chart: "eks-chart",
        version: "1.0.5",
        inlinePolicyStatements: [aws_iam_1.PolicyStatement.fromJson({
                "Effect": "Allow",
                "Action": [
                    "eks:*",
                    "iam:GetRole",
                    "iam:PassRole"
                ],
                "Resource": "*"
            })]
    },
    [AckServiceName.APPLICATIONAUTOSCALING]: {
        chart: "applicationautoscaling-chart",
        version: "1.0.8",
        managedPolicyName: "AutoScalingFullAccess"
    },
    [AckServiceName.ELASTICSEARCHSERVICE]: {
        chart: "elasticsearchservice-chart",
        version: "0.0.2",
        managedPolicyName: "AmazonElasticsearchServiceRolePolicy"
    },
    [AckServiceName.PROMETHEUSSERVICE]: {
        chart: "prometheusservice-chart",
        version: "1.2.5",
        managedPolicyName: "AmazonPrometheusFullAccess"
    },
    [AckServiceName.EMRCONTAINERS]: {
        chart: "emrcontainers-chart",
        version: "1.0.4",
        managedPolicyName: "AmazonEMRContainersServiceRolePolicy"
    },
    [AckServiceName.SFN]: {
        chart: "sfn-chart",
        version: "1.0.5",
        managedPolicyName: "AWSStepFunctionsFullAccess"
    },
    [AckServiceName.KINESIS]: {
        chart: "kinesis-chart",
        version: "0.0.9",
        managedPolicyName: "AmazonKinesisFullAccess"
    },
    [AckServiceName.CLOUDTRAIL]: {
        chart: "cloudtrail-chart",
        version: "1.0.5",
        managedPolicyName: "AWSCloudTrail_FullAccess"
    },
    [AckServiceName.ACM]: {
        chart: "acm-chart",
        version: "0.0.9",
        managedPolicyName: "AWSCertificateManagerFullAccess"
    },
    [AckServiceName.ROUTE53]: {
        chart: "route53-chart",
        version: "0.0.8",
        managedPolicyName: "AmazonRoute53FullAccess"
    },
    [AckServiceName.SQS]: {
        chart: "sqs-chart",
        version: "1.0.6",
        managedPolicyName: "AmazonSQSFullAccess"
    },
    [AckServiceName.SAGEMAKER]: {
        chart: "sagemaker-chart",
        version: "1.2.4",
        managedPolicyName: "AmazonSageMakerFullAccess"
    },
    [AckServiceName.EVENTBRIDGE]: {
        chart: "eventbridge-chart",
        version: "1.0.4",
        managedPolicyName: "AmazonEventBridgeFullAccess"
    },
    [AckServiceName.PIPES]: {
        chart: "pipes-chart",
        version: "1.0.2",
        managedPolicyName: "AmazonEventBridgePipesFullAccess"
    },
    [AckServiceName.SECRETSMANAGER]: {
        chart: "secretsmanager-chart",
        version: "0.0.1",
        managedPolicyName: "SecretsManagerReadWrite"
    },
    [AckServiceName.CLOUDWATCH]: {
        chart: "cloudwatch-chart",
        version: "0.0.2",
        managedPolicyName: "CloudWatchFullAccess"
    },
    [AckServiceName.ROUTE53RESOLVER]: {
        chart: "route53resolver-chart",
        version: "0.0.2",
        managedPolicyName: "AmazonRoute53ResolverFullAccess"
    },
    [AckServiceName.ACMPCA]: {
        chart: "acmpca-chart",
        version: "0.0.2",
        managedPolicyName: "AWSCertificateManagerPrivateCAFullAccess"
    },
    [AckServiceName.CLOUDWATCHLOGS]: {
        chart: "cloudwatchlogs-chart",
        version: "0.0.1",
        managedPolicyName: "CloudWatchLogsFullAccess"
    },
    [AckServiceName.KAFKA]: {
        chart: "kafka-chart",
        version: "0.0.1",
        managedPolicyName: "AmazonMSKFullAccess"
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmljZU1hcHBpbmdzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2FkZG9ucy9hY2svc2VydmljZU1hcHBpbmdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGlEQUFvRDtBQVlwRDs7R0FFRztBQUNILElBQVksY0FtQ1g7QUFuQ0QsV0FBWSxjQUFjO0lBQ3hCLDZCQUFXLENBQUE7SUFDWCxtQ0FBaUIsQ0FBQTtJQUNqQiwrQ0FBNkIsQ0FBQTtJQUM3QixtRUFBaUQsQ0FBQTtJQUNqRCwyQ0FBeUIsQ0FBQTtJQUN6QiwyQ0FBeUIsQ0FBQTtJQUN6QixtREFBaUMsQ0FBQTtJQUNqQyx1Q0FBcUIsQ0FBQTtJQUNyQiw2QkFBVyxDQUFBO0lBQ1gsNkJBQVcsQ0FBQTtJQUNYLDZCQUFXLENBQUE7SUFDWCw2Q0FBMkIsQ0FBQTtJQUMzQiwrREFBNkMsQ0FBQTtJQUM3QyxpREFBK0IsQ0FBQTtJQUMvQiw2Q0FBMkIsQ0FBQTtJQUMzQiw2QkFBVyxDQUFBO0lBQ1gsaUNBQWUsQ0FBQTtJQUNmLHFDQUFtQixDQUFBO0lBQ25CLDZCQUFXLENBQUE7SUFDWCxtQ0FBaUIsQ0FBQTtJQUNqQix1Q0FBcUIsQ0FBQTtJQUNyQiwyQkFBUyxDQUFBO0lBQ1QseURBQXVDLENBQUE7SUFDdkMsaUNBQWUsQ0FBQTtJQUNmLHlEQUF1QyxDQUFBO0lBQ3ZDLDZCQUFXLENBQUE7SUFDWCxxQ0FBbUIsQ0FBQTtJQUNuQixxREFBbUMsQ0FBQTtJQUNuQywyQkFBUyxDQUFBO0lBQ1QseUNBQXVCLENBQUE7SUFDdkIsbURBQWlDLENBQUE7SUFDakMsNkJBQVcsQ0FBQTtJQUNYLDZCQUFXLENBQUE7SUFDWCw2QkFBVyxDQUFBO0FBQ2IsQ0FBQyxFQW5DVyxjQUFjLDhCQUFkLGNBQWMsUUFtQ3pCO0FBRUQ7OztHQUdHO0FBQ1UsUUFBQSxlQUFlLEdBQWtEO0lBQzFFLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCLEtBQUssRUFBRSxXQUFXO1FBQ2xCLE9BQU8sRUFBRyxPQUFPO1FBQ2pCLGlCQUFpQixFQUFFLGVBQWU7S0FDbkM7SUFDRCxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNwQixLQUFLLEVBQUUsV0FBVztRQUNsQixPQUFPLEVBQUcsT0FBTztRQUNqQixpQkFBaUIsRUFBRSxxQkFBcUI7S0FDekM7SUFDRCxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNwQixLQUFLLEVBQUUsV0FBVztRQUNsQixPQUFPLEVBQUcsT0FBTztRQUNqQixpQkFBaUIsRUFBRSxxQkFBcUI7S0FDekM7SUFDRCxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsRUFBRTtRQUNuQixLQUFLLEVBQUUsVUFBVTtRQUNqQixPQUFPLEVBQUcsT0FBTztRQUNqQixpQkFBaUIsRUFBRSxvQkFBb0I7S0FDeEM7SUFDRCxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUN6QixLQUFLLEVBQUUsZ0JBQWdCO1FBQ3ZCLE9BQU8sRUFBRyxPQUFPO1FBQ2pCLGlCQUFpQixFQUFFLDBCQUEwQjtLQUM5QztJQUNELENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCLEtBQUssRUFBRSxXQUFXO1FBQ2xCLE9BQU8sRUFBRyxPQUFPO1FBQ2pCLGlCQUFpQixFQUFFLHNDQUFzQztLQUMxRDtJQUNELENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCLEtBQUssRUFBRSxXQUFXO1FBQ2xCLE9BQU8sRUFBRyxPQUFPO1FBQ2pCLGlCQUFpQixFQUFFLHFCQUFxQjtLQUN6QztJQUNELENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxFQUFFO1FBQzdCLEtBQUssRUFBRSxvQkFBb0I7UUFDM0IsT0FBTyxFQUFHLE9BQU87UUFDakIsaUJBQWlCLEVBQUUsK0JBQStCO0tBQ25EO0lBQ0QsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEVBQUU7UUFDNUIsS0FBSyxFQUFFLG1CQUFtQjtRQUMxQixPQUFPLEVBQUcsUUFBUTtRQUNsQixpQkFBaUIsRUFBRSw2QkFBNkI7S0FDakQ7SUFDRCxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1FBQ2xDLEtBQUssRUFBRSx5QkFBeUI7UUFDaEMsT0FBTyxFQUFHLFFBQVE7UUFDbEIsaUJBQWlCLEVBQUUsbUNBQW1DO0tBQ3ZEO0lBQ0QsQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFDbkIsS0FBSyxFQUFFLFVBQVU7UUFDakIsT0FBTyxFQUFHLFFBQVE7UUFDbEIsaUJBQWlCLEVBQUUsb0JBQW9CO0tBQ3hDO0lBQ0QsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDdkIsS0FBSyxFQUFFLGNBQWM7UUFDckIsT0FBTyxFQUFHLE9BQU87UUFDakIsaUJBQWlCLEVBQUUsc0JBQXNCO0tBQzFDO0lBQ0QsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDcEIsS0FBSyxFQUFFLFdBQVc7UUFDbEIsT0FBTyxFQUFHLE9BQU87UUFDakIsaUJBQWlCLEVBQUUsa0NBQWtDO0tBQ3REO0lBQ0QsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDekIsS0FBSyxFQUFFLGdCQUFnQjtRQUN2QixPQUFPLEVBQUcsT0FBTztRQUNqQixpQkFBaUIsRUFBRSwwQkFBMEI7S0FDOUM7SUFDRCxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNwQixLQUFLLEVBQUUsV0FBVztRQUNsQixPQUFPLEVBQUcsT0FBTztRQUNqQixzQkFBc0IsRUFBRSxDQUFDLHlCQUFlLENBQUMsUUFBUSxDQUFDO2dCQUNoRCxRQUFRLEVBQUUsT0FBTztnQkFDakIsUUFBUSxFQUFFO29CQUNSLE9BQU87b0JBQ1AsYUFBYTtvQkFDYixjQUFjO2lCQUNmO2dCQUNELFVBQVUsRUFBRSxHQUFHO2FBQ2hCLENBQUMsQ0FBQztLQUNKO0lBQ0QsQ0FBQyxjQUFjLENBQUMsc0JBQXNCLENBQUMsRUFBRTtRQUN2QyxLQUFLLEVBQUUsOEJBQThCO1FBQ3JDLE9BQU8sRUFBRyxPQUFPO1FBQ2pCLGlCQUFpQixFQUFFLHVCQUF1QjtLQUMzQztJQUNELENBQUMsY0FBYyxDQUFDLG9CQUFvQixDQUFDLEVBQUU7UUFDckMsS0FBSyxFQUFFLDRCQUE0QjtRQUNuQyxPQUFPLEVBQUcsT0FBTztRQUNqQixpQkFBaUIsRUFBRSxzQ0FBc0M7S0FDMUQ7SUFDRCxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1FBQ2xDLEtBQUssRUFBRSx5QkFBeUI7UUFDaEMsT0FBTyxFQUFHLE9BQU87UUFDakIsaUJBQWlCLEVBQUUsNEJBQTRCO0tBQ2hEO0lBQ0QsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDOUIsS0FBSyxFQUFFLHFCQUFxQjtRQUM1QixPQUFPLEVBQUcsT0FBTztRQUNqQixpQkFBaUIsRUFBRSxzQ0FBc0M7S0FDMUQ7SUFDRCxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUNwQixLQUFLLEVBQUUsV0FBVztRQUNsQixPQUFPLEVBQUcsT0FBTztRQUNqQixpQkFBaUIsRUFBRSw0QkFBNEI7S0FDaEQ7SUFDRCxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUN4QixLQUFLLEVBQUUsZUFBZTtRQUN0QixPQUFPLEVBQUcsT0FBTztRQUNqQixpQkFBaUIsRUFBRSx5QkFBeUI7S0FDN0M7SUFDRCxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUMzQixLQUFLLEVBQUUsa0JBQWtCO1FBQ3pCLE9BQU8sRUFBRyxPQUFPO1FBQ2pCLGlCQUFpQixFQUFFLDBCQUEwQjtLQUM5QztJQUNELENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCLEtBQUssRUFBRSxXQUFXO1FBQ2xCLE9BQU8sRUFBRyxPQUFPO1FBQ2pCLGlCQUFpQixFQUFFLGlDQUFpQztLQUNyRDtJQUNELENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ3hCLEtBQUssRUFBRSxlQUFlO1FBQ3RCLE9BQU8sRUFBRyxPQUFPO1FBQ2pCLGlCQUFpQixFQUFFLHlCQUF5QjtLQUM3QztJQUNELENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ3BCLEtBQUssRUFBRSxXQUFXO1FBQ2xCLE9BQU8sRUFBRyxPQUFPO1FBQ2pCLGlCQUFpQixFQUFFLHFCQUFxQjtLQUN6QztJQUNELENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQzFCLEtBQUssRUFBRSxpQkFBaUI7UUFDeEIsT0FBTyxFQUFHLE9BQU87UUFDakIsaUJBQWlCLEVBQUUsMkJBQTJCO0tBQy9DO0lBQ0QsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLEVBQUU7UUFDNUIsS0FBSyxFQUFFLG1CQUFtQjtRQUMxQixPQUFPLEVBQUcsT0FBTztRQUNqQixpQkFBaUIsRUFBRSw2QkFBNkI7S0FDakQ7SUFDRCxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUN0QixLQUFLLEVBQUUsYUFBYTtRQUNwQixPQUFPLEVBQUcsT0FBTztRQUNqQixpQkFBaUIsRUFBRSxrQ0FBa0M7S0FDdEQ7SUFDRCxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsRUFBRTtRQUMvQixLQUFLLEVBQUUsc0JBQXNCO1FBQzdCLE9BQU8sRUFBRyxPQUFPO1FBQ2pCLGlCQUFpQixFQUFFLHlCQUF5QjtLQUM3QztJQUNELENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQzNCLEtBQUssRUFBRSxrQkFBa0I7UUFDekIsT0FBTyxFQUFHLE9BQU87UUFDakIsaUJBQWlCLEVBQUUsc0JBQXNCO0tBQzFDO0lBQ0QsQ0FBQyxjQUFjLENBQUMsZUFBZSxDQUFDLEVBQUU7UUFDaEMsS0FBSyxFQUFFLHVCQUF1QjtRQUM5QixPQUFPLEVBQUcsT0FBTztRQUNqQixpQkFBaUIsRUFBRSxpQ0FBaUM7S0FDckQ7SUFDRCxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRTtRQUN2QixLQUFLLEVBQUUsY0FBYztRQUNyQixPQUFPLEVBQUcsT0FBTztRQUNqQixpQkFBaUIsRUFBRSwwQ0FBMEM7S0FDOUQ7SUFDRCxDQUFDLGNBQWMsQ0FBQyxjQUFjLENBQUMsRUFBRTtRQUMvQixLQUFLLEVBQUUsc0JBQXNCO1FBQzdCLE9BQU8sRUFBRyxPQUFPO1FBQ2pCLGlCQUFpQixFQUFFLDBCQUEwQjtLQUM5QztJQUNELENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3RCLEtBQUssRUFBRSxhQUFhO1FBQ3BCLE9BQU8sRUFBRyxPQUFPO1FBQ2pCLGlCQUFpQixFQUFFLHFCQUFxQjtLQUN6QztDQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1BvbGljeVN0YXRlbWVudH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1pYW1cIjtcblxuLyoqXG4gKiBDaGFydCBNYXBwaW5nIGZvciBmaWVsZHMgc3VjaCBhcyBjaGFydCwgdmVyc2lvbiwgbWFuYWdlZCBJQU0gcG9saWN5LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEFja0NoYXJ0TWFwcGluZyB7XG4gICAgY2hhcnQ6IHN0cmluZyxcbiAgICB2ZXJzaW9uOiBzdHJpbmcsXG4gICAgbWFuYWdlZFBvbGljeU5hbWU/OiBzdHJpbmdcbiAgICBpbmxpbmVQb2xpY3lTdGF0ZW1lbnRzPzogUG9saWN5U3RhdGVtZW50W11cbn1cblxuLyoqXG4gKiBMaXN0IG9mIGFsbCBzdXBwb3J0ZWQgc3VwcG9ydGVkIEFXUyBzZXJ2aWNlcyBieSBBQ0sgQWRkb24uXG4gKi9cbmV4cG9ydCBlbnVtIEFja1NlcnZpY2VOYW1lIHtcbiAgQUNNID0gXCJhY21cIixcbiAgQUNNUENBID0gXCJhY21wY2FcIixcbiAgQVBJR0FURVdBWVYyID0gXCJhcGlnYXRld2F5djJcIixcbiAgQVBQTElDQVRJT05BVVRPU0NBTElORyA9IFwiYXBwbGljYXRpb25hdXRvc2NhbGluZ1wiLFxuICBDTE9VRFRSQUlMID0gXCJjbG91ZHRyYWlsXCIsXG4gIENMT1VEV0FUQ0ggPSBcImNsb3Vkd2F0Y2hcIixcbiAgQ0xPVURXQVRDSExPR1MgPSBcImNsb3Vkd2F0Y2hsb2dzXCIsXG4gIERZTkFNT0RCID0gXCJkeW5hbW9kYlwiLFxuICBFQzIgPSBcImVjMlwiLFxuICBFQ1IgPSBcImVjclwiLFxuICBFS1MgPSBcImVrc1wiLFxuICBFTEFTVElDQUNIRSA9IFwiZWxhc3RpY2FjaGVcIixcbiAgRUxBU1RJQ1NFQVJDSFNFUlZJQ0UgPSBcImVsYXN0aWNzZWFyY2hzZXJ2aWNlXCIsXG4gIEVNUkNPTlRBSU5FUlMgPSBcImVtcmNvbnRhaW5lcnNcIixcbiAgRVZFTlRCUklER0UgPSBcImV2ZW50YnJpZGdlXCIsXG4gIElBTSA9IFwiaWFtXCIsXG4gIEtBRktBID0gXCJrYWZrYVwiLFxuICBLSU5FU0lTID0gXCJraW5lc2lzXCIsXG4gIEtNUyA9IFwia21zXCIsXG4gIExBTUJEQSA9IFwibGFtYmRhXCIsXG4gIE1FTU9SWURCID0gXCJtZW1vcnlkYlwiLFxuICBNUSA9IFwibXFcIixcbiAgT1BFTlNFQVJDSFNFUlZJQ0UgPSBcIm9wZW5zZWFyY2hzZXJ2aWNlXCIsXG4gIFBJUEVTID0gXCJwaXBlc1wiLFxuICBQUk9NRVRIRVVTU0VSVklDRSA9IFwicHJvbWV0aGV1c3NlcnZpY2VcIixcbiAgUkRTID0gXCJyZHNcIiwgIFxuICBST1VURTUzID0gXCJyb3V0ZTUzXCIsXG4gIFJPVVRFNTNSRVNPTFZFUiA9IFwicm91dGU1M3Jlc29sdmVyXCIsXG4gIFMzID0gXCJzM1wiLFxuICBTQUdFTUFLRVIgPSBcInNhZ2VtYWtlclwiLFxuICBTRUNSRVRTTUFOQUdFUiA9IFwic2VjcmV0c21hbmFnZXJcIixcbiAgU0ZOID0gXCJzZm5cIixcbiAgU05TID0gXCJzbnNcIixcbiAgU1FTID0gXCJzcXNcIixcbn1cblxuLyoqXG4gKiBMaXN0IG9mIGFsbCBTZXJ2aWNlIE1hcHBpbmdzIHN1Y2ggYXMgY2hhcnQsIHZlcnNpb24sIG1hbmFnZWQgSUFNIHBvbGljeSBcbiAqIGZvciBhbGwgc3VwcG9ydGVkIEFXUyBzZXJ2aWNlcyBieSBBQ0sgQWRkb24uXG4gKi9cbmV4cG9ydCBjb25zdCBzZXJ2aWNlTWFwcGluZ3MgOiB7W2tleSBpbiBBY2tTZXJ2aWNlTmFtZV0/OiBBY2tDaGFydE1hcHBpbmcgfSA9IHtcbiAgICBbQWNrU2VydmljZU5hbWUuSUFNXToge1xuICAgICAgY2hhcnQ6IFwiaWFtLWNoYXJ0XCIsXG4gICAgICB2ZXJzaW9uOiAgXCIxLjMuMVwiLFxuICAgICAgbWFuYWdlZFBvbGljeU5hbWU6IFwiSUFNRnVsbEFjY2Vzc1wiXG4gICAgfSxcbiAgICBbQWNrU2VydmljZU5hbWUuUkRTXToge1xuICAgICAgY2hhcnQ6IFwicmRzLWNoYXJ0XCIsXG4gICAgICB2ZXJzaW9uOiAgXCIxLjEuOFwiLFxuICAgICAgbWFuYWdlZFBvbGljeU5hbWU6IFwiQW1hem9uUkRTRnVsbEFjY2Vzc1wiXG4gICAgfSxcbiAgICBbQWNrU2VydmljZU5hbWUuRUMyXToge1xuICAgICAgY2hhcnQ6IFwiZWMyLWNoYXJ0XCIsXG4gICAgICB2ZXJzaW9uOiAgXCIxLjEuMFwiLFxuICAgICAgbWFuYWdlZFBvbGljeU5hbWU6IFwiQW1hem9uUkRTRnVsbEFjY2Vzc1wiXG4gICAgfSxcbiAgICBbQWNrU2VydmljZU5hbWUuUzNdOiB7XG4gICAgICBjaGFydDogXCJzMy1jaGFydFwiLFxuICAgICAgdmVyc2lvbjogIFwiMS4wLjZcIixcbiAgICAgIG1hbmFnZWRQb2xpY3lOYW1lOiBcIkFtYXpvblMzRnVsbEFjY2Vzc1wiXG4gICAgfSxcbiAgICBbQWNrU2VydmljZU5hbWUuRFlOQU1PREJdOiB7XG4gICAgICBjaGFydDogXCJkeW5hbW9kYi1jaGFydFwiLFxuICAgICAgdmVyc2lvbjogIFwiMS4yLjVcIixcbiAgICAgIG1hbmFnZWRQb2xpY3lOYW1lOiBcIkFtYXpvbkR5bmFtb0RCRnVsbEFjY2Vzc1wiXG4gICAgfSxcbiAgICBbQWNrU2VydmljZU5hbWUuRUNSXToge1xuICAgICAgY2hhcnQ6IFwiZWNyLWNoYXJ0XCIsXG4gICAgICB2ZXJzaW9uOiAgXCIxLjAuOVwiLFxuICAgICAgbWFuYWdlZFBvbGljeU5hbWU6IFwiQW1hem9uRUMyQ29udGFpbmVyUmVnaXN0cnlGdWxsQWNjZXNzXCJcbiAgICB9LFxuICAgIFtBY2tTZXJ2aWNlTmFtZS5TTlNdOiB7XG4gICAgICBjaGFydDogXCJzbnMtY2hhcnRcIixcbiAgICAgIHZlcnNpb246ICBcIjEuMC41XCIsXG4gICAgICBtYW5hZ2VkUG9saWN5TmFtZTogXCJBbWF6b25TTlNGdWxsQWNjZXNzXCJcbiAgICB9LFxuICAgIFtBY2tTZXJ2aWNlTmFtZS5BUElHQVRFV0FZVjJdOiB7XG4gICAgICBjaGFydDogXCJhcGlnYXRld2F5djItY2hhcnRcIixcbiAgICAgIHZlcnNpb246ICBcIjEuMC42XCIsXG4gICAgICBtYW5hZ2VkUG9saWN5TmFtZTogXCJBbWF6b25BUElHYXRld2F5QWRtaW5pc3RyYXRvclwiXG4gICAgfSxcbiAgICBbQWNrU2VydmljZU5hbWUuRUxBU1RJQ0FDSEVdOiB7XG4gICAgICBjaGFydDogXCJlbGFzdGljYWNoZS1jaGFydFwiLFxuICAgICAgdmVyc2lvbjogIFwiMC4wLjI4XCIsXG4gICAgICBtYW5hZ2VkUG9saWN5TmFtZTogXCJBbWF6b25FbGFzdGlDYWNoZUZ1bGxBY2Nlc3NcIlxuICAgIH0sXG4gICAgW0Fja1NlcnZpY2VOYW1lLk9QRU5TRUFSQ0hTRVJWSUNFXToge1xuICAgICAgY2hhcnQ6IFwib3BlbnNlYXJjaHNlcnZpY2UtY2hhcnRcIixcbiAgICAgIHZlcnNpb246ICBcIjAuMC4xOFwiLFxuICAgICAgbWFuYWdlZFBvbGljeU5hbWU6IFwiQW1hem9uT3BlblNlYXJjaFNlcnZpY2VGdWxsQWNjZXNzXCJcbiAgICB9LFxuICAgIFtBY2tTZXJ2aWNlTmFtZS5NUV06IHtcbiAgICAgIGNoYXJ0OiBcIm1xLWNoYXJ0XCIsXG4gICAgICB2ZXJzaW9uOiAgXCIwLjAuMjhcIixcbiAgICAgIG1hbmFnZWRQb2xpY3lOYW1lOiBcIkFtYXpvbk1RRnVsbEFjY2Vzc1wiXG4gICAgfSxcbiAgICBbQWNrU2VydmljZU5hbWUuTEFNQkRBXToge1xuICAgICAgY2hhcnQ6IFwibGFtYmRhLWNoYXJ0XCIsXG4gICAgICB2ZXJzaW9uOiAgXCIxLjMuNFwiLFxuICAgICAgbWFuYWdlZFBvbGljeU5hbWU6IFwiQVdTTGFtYmRhX0Z1bGxBY2Nlc3NcIlxuICAgIH0sXG4gICAgW0Fja1NlcnZpY2VOYW1lLktNU106IHtcbiAgICAgIGNoYXJ0OiBcImttcy1jaGFydFwiLFxuICAgICAgdmVyc2lvbjogIFwiMS4wLjdcIixcbiAgICAgIG1hbmFnZWRQb2xpY3lOYW1lOiBcIkFXU0tleU1hbmFnZW1lbnRTZXJ2aWNlUG93ZXJVc2VyXCJcbiAgICB9LFxuICAgIFtBY2tTZXJ2aWNlTmFtZS5NRU1PUllEQl06IHtcbiAgICAgIGNoYXJ0OiBcIm1lbW9yeWRiLWNoYXJ0XCIsXG4gICAgICB2ZXJzaW9uOiAgXCIxLjAuMlwiLFxuICAgICAgbWFuYWdlZFBvbGljeU5hbWU6IFwiQW1hem9uTWVtb3J5REJGdWxsQWNjZXNzXCJcbiAgICB9LFxuICAgIFtBY2tTZXJ2aWNlTmFtZS5FS1NdOiB7XG4gICAgICBjaGFydDogXCJla3MtY2hhcnRcIixcbiAgICAgIHZlcnNpb246ICBcIjEuMC41XCIsXG4gICAgICBpbmxpbmVQb2xpY3lTdGF0ZW1lbnRzOiBbUG9saWN5U3RhdGVtZW50LmZyb21Kc29uKHtcbiAgICAgICAgXCJFZmZlY3RcIjogXCJBbGxvd1wiLFxuICAgICAgICBcIkFjdGlvblwiOiBbXG4gICAgICAgICAgXCJla3M6KlwiLFxuICAgICAgICAgIFwiaWFtOkdldFJvbGVcIixcbiAgICAgICAgICBcImlhbTpQYXNzUm9sZVwiXG4gICAgICAgIF0sXG4gICAgICAgIFwiUmVzb3VyY2VcIjogXCIqXCJcbiAgICAgIH0pXVxuICAgIH0sXG4gICAgW0Fja1NlcnZpY2VOYW1lLkFQUExJQ0FUSU9OQVVUT1NDQUxJTkddOiB7XG4gICAgICBjaGFydDogXCJhcHBsaWNhdGlvbmF1dG9zY2FsaW5nLWNoYXJ0XCIsXG4gICAgICB2ZXJzaW9uOiAgXCIxLjAuOFwiLFxuICAgICAgbWFuYWdlZFBvbGljeU5hbWU6IFwiQXV0b1NjYWxpbmdGdWxsQWNjZXNzXCJcbiAgICB9LFxuICAgIFtBY2tTZXJ2aWNlTmFtZS5FTEFTVElDU0VBUkNIU0VSVklDRV06IHtcbiAgICAgIGNoYXJ0OiBcImVsYXN0aWNzZWFyY2hzZXJ2aWNlLWNoYXJ0XCIsXG4gICAgICB2ZXJzaW9uOiAgXCIwLjAuMlwiLFxuICAgICAgbWFuYWdlZFBvbGljeU5hbWU6IFwiQW1hem9uRWxhc3RpY3NlYXJjaFNlcnZpY2VSb2xlUG9saWN5XCJcbiAgICB9LFxuICAgIFtBY2tTZXJ2aWNlTmFtZS5QUk9NRVRIRVVTU0VSVklDRV06IHtcbiAgICAgIGNoYXJ0OiBcInByb21ldGhldXNzZXJ2aWNlLWNoYXJ0XCIsXG4gICAgICB2ZXJzaW9uOiAgXCIxLjIuNVwiLFxuICAgICAgbWFuYWdlZFBvbGljeU5hbWU6IFwiQW1hem9uUHJvbWV0aGV1c0Z1bGxBY2Nlc3NcIlxuICAgIH0sXG4gICAgW0Fja1NlcnZpY2VOYW1lLkVNUkNPTlRBSU5FUlNdOiB7XG4gICAgICBjaGFydDogXCJlbXJjb250YWluZXJzLWNoYXJ0XCIsXG4gICAgICB2ZXJzaW9uOiAgXCIxLjAuNFwiLFxuICAgICAgbWFuYWdlZFBvbGljeU5hbWU6IFwiQW1hem9uRU1SQ29udGFpbmVyc1NlcnZpY2VSb2xlUG9saWN5XCJcbiAgICB9LFxuICAgIFtBY2tTZXJ2aWNlTmFtZS5TRk5dOiB7XG4gICAgICBjaGFydDogXCJzZm4tY2hhcnRcIixcbiAgICAgIHZlcnNpb246ICBcIjEuMC41XCIsXG4gICAgICBtYW5hZ2VkUG9saWN5TmFtZTogXCJBV1NTdGVwRnVuY3Rpb25zRnVsbEFjY2Vzc1wiXG4gICAgfSxcbiAgICBbQWNrU2VydmljZU5hbWUuS0lORVNJU106IHtcbiAgICAgIGNoYXJ0OiBcImtpbmVzaXMtY2hhcnRcIixcbiAgICAgIHZlcnNpb246ICBcIjAuMC45XCIsXG4gICAgICBtYW5hZ2VkUG9saWN5TmFtZTogXCJBbWF6b25LaW5lc2lzRnVsbEFjY2Vzc1wiXG4gICAgfSxcbiAgICBbQWNrU2VydmljZU5hbWUuQ0xPVURUUkFJTF06IHtcbiAgICAgIGNoYXJ0OiBcImNsb3VkdHJhaWwtY2hhcnRcIixcbiAgICAgIHZlcnNpb246ICBcIjEuMC41XCIsXG4gICAgICBtYW5hZ2VkUG9saWN5TmFtZTogXCJBV1NDbG91ZFRyYWlsX0Z1bGxBY2Nlc3NcIlxuICAgIH0sXG4gICAgW0Fja1NlcnZpY2VOYW1lLkFDTV06IHtcbiAgICAgIGNoYXJ0OiBcImFjbS1jaGFydFwiLFxuICAgICAgdmVyc2lvbjogIFwiMC4wLjlcIixcbiAgICAgIG1hbmFnZWRQb2xpY3lOYW1lOiBcIkFXU0NlcnRpZmljYXRlTWFuYWdlckZ1bGxBY2Nlc3NcIlxuICAgIH0sXG4gICAgW0Fja1NlcnZpY2VOYW1lLlJPVVRFNTNdOiB7XG4gICAgICBjaGFydDogXCJyb3V0ZTUzLWNoYXJ0XCIsXG4gICAgICB2ZXJzaW9uOiAgXCIwLjAuOFwiLFxuICAgICAgbWFuYWdlZFBvbGljeU5hbWU6IFwiQW1hem9uUm91dGU1M0Z1bGxBY2Nlc3NcIlxuICAgIH0sXG4gICAgW0Fja1NlcnZpY2VOYW1lLlNRU106IHtcbiAgICAgIGNoYXJ0OiBcInNxcy1jaGFydFwiLFxuICAgICAgdmVyc2lvbjogIFwiMS4wLjZcIixcbiAgICAgIG1hbmFnZWRQb2xpY3lOYW1lOiBcIkFtYXpvblNRU0Z1bGxBY2Nlc3NcIlxuICAgIH0sXG4gICAgW0Fja1NlcnZpY2VOYW1lLlNBR0VNQUtFUl06IHtcbiAgICAgIGNoYXJ0OiBcInNhZ2VtYWtlci1jaGFydFwiLFxuICAgICAgdmVyc2lvbjogIFwiMS4yLjRcIixcbiAgICAgIG1hbmFnZWRQb2xpY3lOYW1lOiBcIkFtYXpvblNhZ2VNYWtlckZ1bGxBY2Nlc3NcIlxuICAgIH0sXG4gICAgW0Fja1NlcnZpY2VOYW1lLkVWRU5UQlJJREdFXToge1xuICAgICAgY2hhcnQ6IFwiZXZlbnRicmlkZ2UtY2hhcnRcIixcbiAgICAgIHZlcnNpb246ICBcIjEuMC40XCIsXG4gICAgICBtYW5hZ2VkUG9saWN5TmFtZTogXCJBbWF6b25FdmVudEJyaWRnZUZ1bGxBY2Nlc3NcIlxuICAgIH0sXG4gICAgW0Fja1NlcnZpY2VOYW1lLlBJUEVTXToge1xuICAgICAgY2hhcnQ6IFwicGlwZXMtY2hhcnRcIixcbiAgICAgIHZlcnNpb246ICBcIjEuMC4yXCIsXG4gICAgICBtYW5hZ2VkUG9saWN5TmFtZTogXCJBbWF6b25FdmVudEJyaWRnZVBpcGVzRnVsbEFjY2Vzc1wiXG4gICAgfSxcbiAgICBbQWNrU2VydmljZU5hbWUuU0VDUkVUU01BTkFHRVJdOiB7XG4gICAgICBjaGFydDogXCJzZWNyZXRzbWFuYWdlci1jaGFydFwiLFxuICAgICAgdmVyc2lvbjogIFwiMC4wLjFcIixcbiAgICAgIG1hbmFnZWRQb2xpY3lOYW1lOiBcIlNlY3JldHNNYW5hZ2VyUmVhZFdyaXRlXCJcbiAgICB9LFxuICAgIFtBY2tTZXJ2aWNlTmFtZS5DTE9VRFdBVENIXToge1xuICAgICAgY2hhcnQ6IFwiY2xvdWR3YXRjaC1jaGFydFwiLFxuICAgICAgdmVyc2lvbjogIFwiMC4wLjJcIixcbiAgICAgIG1hbmFnZWRQb2xpY3lOYW1lOiBcIkNsb3VkV2F0Y2hGdWxsQWNjZXNzXCJcbiAgICB9LFxuICAgIFtBY2tTZXJ2aWNlTmFtZS5ST1VURTUzUkVTT0xWRVJdOiB7XG4gICAgICBjaGFydDogXCJyb3V0ZTUzcmVzb2x2ZXItY2hhcnRcIixcbiAgICAgIHZlcnNpb246ICBcIjAuMC4yXCIsXG4gICAgICBtYW5hZ2VkUG9saWN5TmFtZTogXCJBbWF6b25Sb3V0ZTUzUmVzb2x2ZXJGdWxsQWNjZXNzXCJcbiAgICB9LFxuICAgIFtBY2tTZXJ2aWNlTmFtZS5BQ01QQ0FdOiB7XG4gICAgICBjaGFydDogXCJhY21wY2EtY2hhcnRcIixcbiAgICAgIHZlcnNpb246ICBcIjAuMC4yXCIsXG4gICAgICBtYW5hZ2VkUG9saWN5TmFtZTogXCJBV1NDZXJ0aWZpY2F0ZU1hbmFnZXJQcml2YXRlQ0FGdWxsQWNjZXNzXCJcbiAgICB9LFxuICAgIFtBY2tTZXJ2aWNlTmFtZS5DTE9VRFdBVENITE9HU106IHtcbiAgICAgIGNoYXJ0OiBcImNsb3Vkd2F0Y2hsb2dzLWNoYXJ0XCIsXG4gICAgICB2ZXJzaW9uOiAgXCIwLjAuMVwiLFxuICAgICAgbWFuYWdlZFBvbGljeU5hbWU6IFwiQ2xvdWRXYXRjaExvZ3NGdWxsQWNjZXNzXCJcbiAgICB9LFxuICAgIFtBY2tTZXJ2aWNlTmFtZS5LQUZLQV06IHtcbiAgICAgIGNoYXJ0OiBcImthZmthLWNoYXJ0XCIsXG4gICAgICB2ZXJzaW9uOiAgXCIwLjAuMVwiLFxuICAgICAgbWFuYWdlZFBvbGljeU5hbWU6IFwiQW1hem9uTVNLRnVsbEFjY2Vzc1wiXG4gICAgfVxufTtcbiJdfQ==