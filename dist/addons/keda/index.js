"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KedaAddOn = void 0;
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const ts_deepmerge_1 = require("ts-deepmerge");
const utils_1 = require("../../utils");
const helm_addon_1 = require("../helm-addon");
/**
 * Default props to be used when creating the Helm chart
 */
const defaultProps = {
    name: "blueprints-keda-addon",
    chart: "keda",
    namespace: "keda",
    version: "2.14.2",
    release: "keda",
    repository: "https://kedacore.github.io/charts",
    values: {},
    kedaOperatorName: "keda-operator",
    kedaServiceAccountName: "keda-operator",
    irsaRoles: []
};
/**
 * Main class to instantiate the Helm chart
 */
let KedaAddOn = class KedaAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        let values = populateValues(this.options);
        values = (0, ts_deepmerge_1.merge)(values, (_a = this.props.values) !== null && _a !== void 0 ? _a : {});
        const namespace = (0, utils_1.createNamespace)(this.options.namespace, cluster);
        if (this.options.irsaRoles.length > 0) {
            //Create Service Account with IRSA
            const opts = { name: this.options.kedaOperatorName, namespace: this.options.namespace };
            const sa = cluster.addServiceAccount(this.options.kedaServiceAccountName, opts);
            setRoles(sa, this.options.irsaRoles);
            sa.node.addDependency(namespace);
            const chart = this.addHelmChart(clusterInfo, values);
            chart.node.addDependency(sa);
            return Promise.resolve(chart);
        }
        else {
            //Let Keda Create Service account for you. This is controlled by flag helmOptions.createServiceAccount (refer line no:118)
            const chart = this.addHelmChart(clusterInfo, values);
            return Promise.resolve(chart);
        }
    }
};
exports.KedaAddOn = KedaAddOn;
exports.KedaAddOn = KedaAddOn = __decorate([
    utils_1.supportsALL
], KedaAddOn);
/**
 * populateValues populates the appropriate values used to customize the Helm chart
 * @param helmOptions User provided values to customize the chart
 */
function populateValues(helmOptions) {
    var _a;
    const values = (_a = helmOptions.values) !== null && _a !== void 0 ? _a : {};
    (0, utils_1.setPath)(values, "operator.name", helmOptions.kedaOperatorName);
    //In Case irsaRoles array is non empty, code should not allow Keda to create Service Account, CDK will create Service Account with IRSA enabled
    (0, utils_1.setPath)(values, "serviceAccount.operator.create", helmOptions.irsaRoles.length > 0 ? false : true);
    (0, utils_1.setPath)(values, "serviceAccount.operator.name", helmOptions.kedaServiceAccountName);
    return values;
}
/**
 * This function will set the roles to Service Account
 * @param sa - Service Account Object
 * @param irsaRoles - Array  of Managed IAM Policies
 */
function setRoles(sa, irsaRoles) {
    irsaRoles.forEach((policyName) => {
        const policy = aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName(policyName);
        sa.role.addManagedPolicy(policy);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2tlZGEvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQ0EsaURBQW9EO0FBRXBELCtDQUFxQztBQUVyQyx1Q0FBb0U7QUFDcEUsOENBQThFO0FBK0M5RTs7R0FFRztBQUNILE1BQU0sWUFBWSxHQUFvQztJQUNwRCxJQUFJLEVBQUUsdUJBQXVCO0lBQzdCLEtBQUssRUFBRSxNQUFNO0lBQ2IsU0FBUyxFQUFDLE1BQU07SUFDaEIsT0FBTyxFQUFFLFFBQVE7SUFDakIsT0FBTyxFQUFFLE1BQU07SUFDZixVQUFVLEVBQUcsbUNBQW1DO0lBQ2hELE1BQU0sRUFBRSxFQUFFO0lBQ1YsZ0JBQWdCLEVBQUUsZUFBZTtJQUNqQyxzQkFBc0IsRUFBRSxlQUFlO0lBQ3ZDLFNBQVMsRUFBRSxFQUFFO0NBQ2QsQ0FBQztBQUVGOztHQUVHO0FBRUksSUFBTSxTQUFTLEdBQWYsTUFBTSxTQUFVLFNBQVEsc0JBQVM7SUFHdEMsWUFBWSxLQUFzQjtRQUNoQyxLQUFLLENBQUMsRUFBQyxHQUFHLFlBQVksRUFBRSxHQUFHLEtBQUssRUFBQyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBdUIsQ0FBQztJQUM5QyxDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQXdCOztRQUU3QixNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO1FBQ3BDLElBQUksTUFBTSxHQUFXLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbEQsTUFBTSxHQUFHLElBQUEsb0JBQUssRUFBQyxNQUFNLEVBQUUsTUFBQSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sbUNBQUksRUFBRSxDQUFDLENBQUM7UUFFaEQsTUFBTSxTQUFTLEdBQUcsSUFBQSx1QkFBZSxFQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBVSxFQUFHLE9BQU8sQ0FBQyxDQUFDO1FBRXJFLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3ZDLGtDQUFrQztZQUNsQyxNQUFNLElBQUksR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3hGLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHNCQUF1QixFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ2pGLFFBQVEsQ0FBQyxFQUFFLEVBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFVLENBQUMsQ0FBQztZQUNyQyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUVqQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNyRCxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUM3QixPQUFPLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFaEMsQ0FBQzthQUFNLENBQUM7WUFDTiwwSEFBMEg7WUFDMUgsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDckQsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLENBQUM7SUFHSCxDQUFDO0NBQ0YsQ0FBQTtBQW5DWSw4QkFBUztvQkFBVCxTQUFTO0lBRHJCLG1CQUFXO0dBQ0MsU0FBUyxDQW1DckI7QUFFRDs7O0dBR0c7QUFDSCxTQUFTLGNBQWMsQ0FBQyxXQUEyQjs7SUFDakQsTUFBTSxNQUFNLEdBQUcsTUFBQSxXQUFXLENBQUMsTUFBTSxtQ0FBSSxFQUFFLENBQUM7SUFFeEMsSUFBQSxlQUFPLEVBQUMsTUFBTSxFQUFFLGVBQWUsRUFBRyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUNoRSwrSUFBK0k7SUFDL0ksSUFBQSxlQUFPLEVBQUMsTUFBTSxFQUFFLGdDQUFnQyxFQUFHLFdBQVcsQ0FBQyxTQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNyRyxJQUFBLGVBQU8sRUFBQyxNQUFNLEVBQUUsOEJBQThCLEVBQUcsV0FBVyxDQUFDLHNCQUFzQixDQUFDLENBQUM7SUFFckYsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQztBQUVEOzs7O0dBSUc7QUFDRixTQUFTLFFBQVEsQ0FBQyxFQUFpQixFQUFFLFNBQW1CO0lBQ3JELFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRTtRQUM3QixNQUFNLE1BQU0sR0FBRyx1QkFBYSxDQUFDLHdCQUF3QixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VydmljZUFjY291bnQgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtZWtzJztcclxuaW1wb3J0IHsgTWFuYWdlZFBvbGljeSB9IGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtaWFtXCI7XHJcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xyXG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gXCJ0cy1kZWVwbWVyZ2VcIjtcclxuaW1wb3J0IHsgQ2x1c3RlckluZm8sIFZhbHVlcyB9IGZyb20gXCIuLi8uLi9zcGlcIjtcclxuaW1wb3J0IHsgY3JlYXRlTmFtZXNwYWNlLCBzZXRQYXRoLCBzdXBwb3J0c0FMTCB9IGZyb20gXCIuLi8uLi91dGlsc1wiO1xyXG5pbXBvcnQgeyBIZWxtQWRkT24sIEhlbG1BZGRPblByb3BzLCBIZWxtQWRkT25Vc2VyUHJvcHMgfSBmcm9tIFwiLi4vaGVsbS1hZGRvblwiO1xyXG5cclxuLyoqXHJcbiAqIFVzZXIgcHJvdmlkZWQgb3B0aW9ucyBmb3IgdGhlIEhlbG0gQ2hhcnRcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgS2VkYUFkZE9uUHJvcHMgZXh0ZW5kcyBIZWxtQWRkT25Vc2VyUHJvcHMge1xyXG4gICAgLyoqXHJcbiAgICAgKiBWZXJzaW9uIG9mIHRoZSBoZWxtIGNoYXJ0IHRvIGRlcGxveVxyXG4gICAgICovXHJcbiAgICB2ZXJzaW9uPzogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBOYW1lIG9mIHRoZSBLRURBIG9wZXJhdG9yXHJcbiAgICAgKi9cclxuICAgIGtlZGFPcGVyYXRvck5hbWU/OiBzdHJpbmc7XHJcbiAgICAvKipcclxuICAgICAqIFRoZSBuYW1lIG9mIHRoZSBzZXJ2aWNlIGFjY291bnQgdG8gdXNlLiBJZiBub3Qgc2V0IGFuZCBjcmVhdGUgaXMgdHJ1ZSwgYSBuYW1lIGlzIGdlbmVyYXRlZC5cclxuICAgICAqL1xyXG4gICAga2VkYVNlcnZpY2VBY2NvdW50TmFtZT86IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogc2VjdXJpdHlDb250ZXh0OiBmc0dyb3VwXHJcbiAgICAgKiBDaGVjayB0aGUgd29ya2Fyb3VuZCBmb3IgU1FTIFNjYWxhciB3aXRoIElSU0EgaHR0cHM6Ly9naXRodWIuY29tL2tlZGFjb3JlL2tlZGEvaXNzdWVzLzgzNyNpc3N1ZWNvbW1lbnQtNzg5MDM3MzI2XHJcbiAgICAgKlxyXG4gICAgICogQGRlcHJlY2F0ZWQgSGFzIG5vIGVmZmVjdCBmb3IgdmVyc2lvbiAyLjE0IGFuZCBhYm92ZS4gVXBkYXRlIHBvZFNlY3VyaXR5Q29udGV4dC5vcGVyYXRvci5mc0dyb3VwIGluIFZhbHVlcyBpbnN0ZWFkLiBLRURBLWlzLXNlY3VyZS1ieS1kZWZhdWx0IHdpdGggZnNHcm91cDogMTAwMFxyXG4gICAgICovXHJcbiAgICBwb2RTZWN1cml0eUNvbnRleHRGc0dyb3VwPzogbnVtYmVyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBzZWN1cml0eUNvbnRleHQ6cnVuQXNHcm91cFxyXG4gICAgICogQ2hlY2sgdGhlIHdvcmthcm91bmQgZm9yIFNRUyBTY2FsYXIgd2l0aCBJUlNBIGh0dHBzOi8vZ2l0aHViLmNvbS9rZWRhY29yZS9rZWRhL2lzc3Vlcy84MzcjaXNzdWVjb21tZW50LTc4OTAzNzMyNlxyXG4gICAgICpcclxuICAgICAqIEBkZXByZWNhdGVkIEhhcyBubyBlZmZlY3QgZm9yIHZlcnNpb24gMi4xNCBhbmQgYWJvdmUuIFVwZGF0ZSBwb2RTZWN1cml0eUNvbnRleHQub3BlcmF0b3IucnVuQXNHcm91cCBpbiBWYWx1ZXMgaW5zdGVhZC4gS0VEQS1pcy1zZWN1cmUtYnktZGVmYXVsdCB3aXRoIHJ1bkFzR3JvdXA6IDEwMDBcclxuICAgICAqL1xyXG4gICAgc2VjdXJpdHlDb250ZXh0UnVuQXNHcm91cD86IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogc2VjdXJpdHlDb250ZXh0OnJ1bkFzVXNlclxyXG4gICAgICogQ2hlY2sgdGhlIHdvcmthcm91bmQgZm9yIFNRUyBTY2FsYXIgd2l0aCBJUlNBIGh0dHBzOi8vZ2l0aHViLmNvbS9rZWRhY29yZS9rZWRhL2lzc3Vlcy84MzcjaXNzdWVjb21tZW50LTc4OTAzNzMyNlxyXG4gICAgICpcclxuICAgICAqIEBkZXByZWNhdGVkIEhhcyBubyBlZmZlY3QgZm9yIHZlcnNpb24gMi4xNCBhbmQgYWJvdmUuIFVwZGF0ZSBwb2RTZWN1cml0eUNvbnRleHQub3BlcmF0b3IucnVuQXNVc2VyIGluIFZhbHVlcyBpbnN0ZWFkLiBLRURBLWlzLXNlY3VyZS1ieS1kZWZhdWx0IHdpdGggcnVuQXNVc2VyOiAxMDAwXHJcbiAgICAgKi9cclxuICAgIHNlY3VyaXR5Q29udGV4dFJ1bkFzVXNlcj86IG51bWJlcjtcclxuICAgIC8qKlxyXG4gICAgICogQW4gYXJyYXkgb2YgTWFuYWdlZCBJQU0gUG9saWNpZXMgd2hpY2ggU2VydmljZSBBY2NvdW50IG9mIEtFREEgb3BlcmF0b3IgbmVlZHMgZm9yIElSU0EgRWc6IGlyc2FSb2xlczpbXCJDbG91ZFdhdGNoRnVsbEFjY2Vzc1wiLFwiQW1hem9uU1FTRnVsbEFjY2Vzc1wiXS4gSWYgbm90IGVtcHR5XHJcbiAgICAgKiBTZXJ2aWNlIEFjY291bnQgd2lsbCBiZSBDcmVhdGVkIGJ5IENESyB3aXRoIElBTSBSb2xlcyBNYXBwZWQgKElSU0EpLiBJbiBjYXNlIGlmIGl0cyBlbXB0eSwgS2VkYSB3aWxsIGNyZWF0ZSB0aGUgU2VydmljZSBBY2NvdW50IHdpdGggb3V0IElBTSBSb2xlc1xyXG4gICAgICovXHJcbiAgICBpcnNhUm9sZXM/OiBzdHJpbmdbXTtcclxuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZhdWx0IHByb3BzIHRvIGJlIHVzZWQgd2hlbiBjcmVhdGluZyB0aGUgSGVsbSBjaGFydFxyXG4gKi9cclxuY29uc3QgZGVmYXVsdFByb3BzOiBIZWxtQWRkT25Qcm9wcyAmIEtlZGFBZGRPblByb3BzID0ge1xyXG4gIG5hbWU6IFwiYmx1ZXByaW50cy1rZWRhLWFkZG9uXCIsXHJcbiAgY2hhcnQ6IFwia2VkYVwiLFxyXG4gIG5hbWVzcGFjZTpcImtlZGFcIixcclxuICB2ZXJzaW9uOiBcIjIuMTQuMlwiLFxyXG4gIHJlbGVhc2U6IFwia2VkYVwiLFxyXG4gIHJlcG9zaXRvcnk6ICBcImh0dHBzOi8va2VkYWNvcmUuZ2l0aHViLmlvL2NoYXJ0c1wiLFxyXG4gIHZhbHVlczoge30sXHJcbiAga2VkYU9wZXJhdG9yTmFtZTogXCJrZWRhLW9wZXJhdG9yXCIsXHJcbiAga2VkYVNlcnZpY2VBY2NvdW50TmFtZTogXCJrZWRhLW9wZXJhdG9yXCIsXHJcbiAgaXJzYVJvbGVzOiBbXVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIE1haW4gY2xhc3MgdG8gaW5zdGFudGlhdGUgdGhlIEhlbG0gY2hhcnRcclxuICovXHJcbkBzdXBwb3J0c0FMTFxyXG5leHBvcnQgY2xhc3MgS2VkYUFkZE9uIGV4dGVuZHMgSGVsbUFkZE9uIHtcclxuXHJcbiAgcmVhZG9ubHkgb3B0aW9uczogS2VkYUFkZE9uUHJvcHM7XHJcbiAgY29uc3RydWN0b3IocHJvcHM/OiBLZWRhQWRkT25Qcm9wcykge1xyXG4gICAgc3VwZXIoey4uLmRlZmF1bHRQcm9wcywgLi4ucHJvcHN9KTtcclxuICAgIHRoaXMub3B0aW9ucyA9IHRoaXMucHJvcHMgYXMgS2VkYUFkZE9uUHJvcHM7XHJcbiAgfVxyXG5cclxuICBkZXBsb3koY2x1c3RlckluZm86IENsdXN0ZXJJbmZvKTogUHJvbWlzZTxDb25zdHJ1Y3Q+IHtcclxuXHJcbiAgICBjb25zdCBjbHVzdGVyID0gY2x1c3RlckluZm8uY2x1c3RlcjtcclxuICAgIGxldCB2YWx1ZXM6IFZhbHVlcyA9IHBvcHVsYXRlVmFsdWVzKHRoaXMub3B0aW9ucyk7XHJcbiAgICB2YWx1ZXMgPSBtZXJnZSh2YWx1ZXMsIHRoaXMucHJvcHMudmFsdWVzID8/IHt9KTtcclxuXHJcbiAgICBjb25zdCBuYW1lc3BhY2UgPSBjcmVhdGVOYW1lc3BhY2UodGhpcy5vcHRpb25zLm5hbWVzcGFjZSEgLCBjbHVzdGVyKTtcclxuXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLmlyc2FSb2xlcyEubGVuZ3RoID4gMCkge1xyXG4gICAgICAvL0NyZWF0ZSBTZXJ2aWNlIEFjY291bnQgd2l0aCBJUlNBXHJcbiAgICAgIGNvbnN0IG9wdHMgPSB7IG5hbWU6IHRoaXMub3B0aW9ucy5rZWRhT3BlcmF0b3JOYW1lLCBuYW1lc3BhY2U6IHRoaXMub3B0aW9ucy5uYW1lc3BhY2UgfTtcclxuICAgICAgY29uc3Qgc2EgPSBjbHVzdGVyLmFkZFNlcnZpY2VBY2NvdW50KHRoaXMub3B0aW9ucy5rZWRhU2VydmljZUFjY291bnROYW1lISwgb3B0cyk7XHJcbiAgICAgIHNldFJvbGVzKHNhLHRoaXMub3B0aW9ucy5pcnNhUm9sZXMhKTtcclxuICAgICAgc2Eubm9kZS5hZGREZXBlbmRlbmN5KG5hbWVzcGFjZSk7XHJcblxyXG4gICAgICBjb25zdCBjaGFydCA9IHRoaXMuYWRkSGVsbUNoYXJ0KGNsdXN0ZXJJbmZvLCB2YWx1ZXMpO1xyXG4gICAgICBjaGFydC5ub2RlLmFkZERlcGVuZGVuY3koc2EpO1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNoYXJ0KTtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvL0xldCBLZWRhIENyZWF0ZSBTZXJ2aWNlIGFjY291bnQgZm9yIHlvdS4gVGhpcyBpcyBjb250cm9sbGVkIGJ5IGZsYWcgaGVsbU9wdGlvbnMuY3JlYXRlU2VydmljZUFjY291bnQgKHJlZmVyIGxpbmUgbm86MTE4KVxyXG4gICAgICBjb25zdCBjaGFydCA9IHRoaXMuYWRkSGVsbUNoYXJ0KGNsdXN0ZXJJbmZvLCB2YWx1ZXMpO1xyXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNoYXJ0KTtcclxuICAgIH1cclxuXHJcblxyXG4gIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIHBvcHVsYXRlVmFsdWVzIHBvcHVsYXRlcyB0aGUgYXBwcm9wcmlhdGUgdmFsdWVzIHVzZWQgdG8gY3VzdG9taXplIHRoZSBIZWxtIGNoYXJ0XHJcbiAqIEBwYXJhbSBoZWxtT3B0aW9ucyBVc2VyIHByb3ZpZGVkIHZhbHVlcyB0byBjdXN0b21pemUgdGhlIGNoYXJ0XHJcbiAqL1xyXG5mdW5jdGlvbiBwb3B1bGF0ZVZhbHVlcyhoZWxtT3B0aW9uczogS2VkYUFkZE9uUHJvcHMpOiBWYWx1ZXMge1xyXG4gIGNvbnN0IHZhbHVlcyA9IGhlbG1PcHRpb25zLnZhbHVlcyA/PyB7fTtcclxuXHJcbiAgc2V0UGF0aCh2YWx1ZXMsIFwib3BlcmF0b3IubmFtZVwiLCAgaGVsbU9wdGlvbnMua2VkYU9wZXJhdG9yTmFtZSk7XHJcbiAgLy9JbiBDYXNlIGlyc2FSb2xlcyBhcnJheSBpcyBub24gZW1wdHksIGNvZGUgc2hvdWxkIG5vdCBhbGxvdyBLZWRhIHRvIGNyZWF0ZSBTZXJ2aWNlIEFjY291bnQsIENESyB3aWxsIGNyZWF0ZSBTZXJ2aWNlIEFjY291bnQgd2l0aCBJUlNBIGVuYWJsZWRcclxuICBzZXRQYXRoKHZhbHVlcywgXCJzZXJ2aWNlQWNjb3VudC5vcGVyYXRvci5jcmVhdGVcIiwgIGhlbG1PcHRpb25zLmlyc2FSb2xlcyEubGVuZ3RoID4gMCA/IGZhbHNlIDogdHJ1ZSk7XHJcbiAgc2V0UGF0aCh2YWx1ZXMsIFwic2VydmljZUFjY291bnQub3BlcmF0b3IubmFtZVwiLCAgaGVsbU9wdGlvbnMua2VkYVNlcnZpY2VBY2NvdW50TmFtZSk7XHJcblxyXG4gIHJldHVybiB2YWx1ZXM7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGZ1bmN0aW9uIHdpbGwgc2V0IHRoZSByb2xlcyB0byBTZXJ2aWNlIEFjY291bnRcclxuICogQHBhcmFtIHNhIC0gU2VydmljZSBBY2NvdW50IE9iamVjdFxyXG4gKiBAcGFyYW0gaXJzYVJvbGVzIC0gQXJyYXkgIG9mIE1hbmFnZWQgSUFNIFBvbGljaWVzXHJcbiAqL1xyXG4gZnVuY3Rpb24gc2V0Um9sZXMoc2E6U2VydmljZUFjY291bnQsIGlyc2FSb2xlczogc3RyaW5nW10pe1xyXG4gICAgaXJzYVJvbGVzLmZvckVhY2goKHBvbGljeU5hbWUpID0+IHtcclxuICAgICAgICBjb25zdCBwb2xpY3kgPSBNYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZShwb2xpY3lOYW1lKTtcclxuICAgICAgICBzYS5yb2xlLmFkZE1hbmFnZWRQb2xpY3kocG9saWN5KTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG4iXX0=