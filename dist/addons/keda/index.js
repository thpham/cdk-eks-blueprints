"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KedaAddOn = void 0;
const aws_iam_1 = require("aws-cdk-lib/aws-iam");
const ts_deepmerge_1 = require("ts-deepmerge");
const utils_1 = require("../../utils");
const helm_addon_1 = require("../helm-addon");
/**
 * Default props to be used when creating the Helm chart
 */
const defaultProps = {
    name: "blueprints-keda-addon",
    chart: "keda",
    namespace: "keda",
    version: "2.13.2",
    release: "keda",
    repository: "https://kedacore.github.io/charts",
    values: {},
    kedaOperatorName: "keda-operator",
    kedaServiceAccountName: "keda-operator",
    irsaRoles: []
};
/**
 * Main class to instantiate the Helm chart
 */
let KedaAddOn = class KedaAddOn extends helm_addon_1.HelmAddOn {
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = this.props;
    }
    deploy(clusterInfo) {
        var _a;
        const cluster = clusterInfo.cluster;
        let values = populateValues(this.options);
        values = (0, ts_deepmerge_1.merge)(values, (_a = this.props.values) !== null && _a !== void 0 ? _a : {});
        if (this.options.irsaRoles.length > 0) {
            //Create Service Account with IRSA
            const opts = { name: this.options.kedaOperatorName, namespace: this.options.namespace };
            const sa = cluster.addServiceAccount(this.options.kedaServiceAccountName, opts);
            setRoles(sa, this.options.irsaRoles);
            const namespace = (0, utils_1.createNamespace)(this.options.namespace, cluster);
            sa.node.addDependency(namespace);
            const chart = this.addHelmChart(clusterInfo, values);
            chart.node.addDependency(sa);
            return Promise.resolve(chart);
        }
        else {
            //Let Keda Create Service account for you. This is controlled by flag helmOptions.createServiceAccount (refer line no:118)
            const chart = this.addHelmChart(clusterInfo, values);
            return Promise.resolve(chart);
        }
    }
};
exports.KedaAddOn = KedaAddOn;
exports.KedaAddOn = KedaAddOn = __decorate([
    utils_1.supportsALL
], KedaAddOn);
/**
 * populateValues populates the appropriate values used to customize the Helm chart
 * @param helmOptions User provided values to customize the chart
 */
function populateValues(helmOptions) {
    var _a;
    const values = (_a = helmOptions.values) !== null && _a !== void 0 ? _a : {};
    // Check the workaround for SQS Scalar https://github.com/kedacore/keda/issues/837
    (0, utils_1.setPath)(values, "operator.name", helmOptions.kedaOperatorName);
    (0, utils_1.setPath)(values, "podSecurityContext.fsGroup", helmOptions.podSecurityContextFsGroup);
    (0, utils_1.setPath)(values, "securityContext.runAsGroup", helmOptions.securityContextRunAsGroup);
    (0, utils_1.setPath)(values, "securityContext.runAsUser", helmOptions.securityContextRunAsUser);
    //In Case irsaRoles array is non empty, code should not allow Keda to create Service Account, CDK will create Service Account with IRSA enabled
    (0, utils_1.setPath)(values, "serviceAccount.create", helmOptions.irsaRoles.length > 0 ? false : true);
    (0, utils_1.setPath)(values, "serviceAccount.name", helmOptions.kedaServiceAccountName);
    return values;
}
/**
 * This function will set the roles to Service Account
 * @param sa - Service Account Object
 * @param irsaRoles - Array  of Managed IAM Policies
 */
function setRoles(sa, irsaRoles) {
    irsaRoles.forEach((policyName) => {
        const policy = aws_iam_1.ManagedPolicy.fromAwsManagedPolicyName(policyName);
        sa.role.addManagedPolicy(policy);
    });
}
//# sourceMappingURL=data:application/json;base64,