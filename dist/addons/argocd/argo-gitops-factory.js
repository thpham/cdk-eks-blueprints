"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateArgoHelmApplicationValues = exports.createArgoHelmApplication = exports.ArgoGitOpsFactory = void 0;
const constructs_1 = require("constructs");
const addons_1 = require("../../addons");
const spi_1 = require("../../spi");
const kubectl_provider_1 = require("../helm-addon/kubectl-provider");
const utils_1 = require("../../utils");
const originalHelmDeploy = kubectl_provider_1.KubectlProvider.applyHelmDeployment;
class ArgoGitOpsFactory {
    static enableGitOps() {
        kubectl_provider_1.KubectlProvider.applyHelmDeployment = exports.createArgoHelmApplication;
    }
    static enableGitOpsAppOfApps() {
        kubectl_provider_1.KubectlProvider.applyHelmDeployment = exports.generateArgoHelmApplicationValues;
    }
}
exports.ArgoGitOpsFactory = ArgoGitOpsFactory;
const createArgoHelmApplication = function (clusterInfo, helmDeployment) {
    if (clusterInfo.getResourceContext().blueprintProps.enableGitOpsMode == spi_1.GitOpsMode.APPLICATION) {
        const argoAddOn = getArgoApplicationGenerator(clusterInfo);
        const values = helmDeployment.dependencyMode ? { [helmDeployment.chart]: helmDeployment.values } : helmDeployment.values;
        return argoAddOn.generate(clusterInfo, {
            name: helmDeployment.name,
            namespace: helmDeployment.namespace,
            values: values,
        });
    }
    else {
        return originalHelmDeploy(clusterInfo, helmDeployment);
    }
};
exports.createArgoHelmApplication = createArgoHelmApplication;
function getArgoApplicationGenerator(clusterInfo) {
    var _a;
    for (let addOn of (_a = clusterInfo.getResourceContext().blueprintProps.addOns) !== null && _a !== void 0 ? _a : []) {
        const generator = addOn;
        if (generator instanceof addons_1.ArgoCDAddOn) {
            return generator;
        }
    }
    throw Error("GitOps Engine is not defined in the blueprint");
}
const generateArgoHelmApplicationValues = function (clusterInfo, helmDeployment) {
    if (clusterInfo.getResourceContext().blueprintProps.enableGitOpsMode == spi_1.GitOpsMode.APP_OF_APPS) {
        // Add `enabled` property to each addon
        helmDeployment.values.enable = true;
        clusterInfo.addAddOnContext((0, utils_1.kebabToCamel)(helmDeployment.name), helmDeployment.values);
        // No dependencies required because the values are used at postDeploy stage of ArgoCD AddOn.
        // Generate dummy construct to meet the function requirement.
        return new constructs_1.Construct(clusterInfo.cluster, `dummy${helmDeployment.name}`);
    }
    else {
        return originalHelmDeploy(clusterInfo, helmDeployment);
    }
};
exports.generateArgoHelmApplicationValues = generateArgoHelmApplicationValues;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJnby1naXRvcHMtZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZGRvbnMvYXJnb2NkL2FyZ28tZ2l0b3BzLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMkNBQXVDO0FBQ3ZDLHlDQUEyQztBQUUzQyxtQ0FBb0Q7QUFDcEQscUVBQWlFO0FBQ2pFLHVDQUEyQztBQUUzQyxNQUFNLGtCQUFrQixHQUFHLGtDQUFlLENBQUMsbUJBQW1CLENBQUM7QUFFL0QsTUFBYSxpQkFBaUI7SUFDbkIsTUFBTSxDQUFDLFlBQVk7UUFDdEIsa0NBQWUsQ0FBQyxtQkFBbUIsR0FBRyxpQ0FBeUIsQ0FBQztJQUNwRSxDQUFDO0lBRU0sTUFBTSxDQUFDLHFCQUFxQjtRQUMvQixrQ0FBZSxDQUFDLG1CQUFtQixHQUFHLHlDQUFpQyxDQUFDO0lBQzVFLENBQUM7Q0FDSjtBQVJELDhDQVFDO0FBRU0sTUFBTSx5QkFBeUIsR0FBRyxVQUFVLFdBQXdCLEVBQUUsY0FBbUM7SUFDNUcsSUFBSSxXQUFXLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxjQUFjLENBQUMsZ0JBQWdCLElBQUksZ0JBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM3RixNQUFNLFNBQVMsR0FBRywyQkFBMkIsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMzRCxNQUFNLE1BQU0sR0FBRyxjQUFjLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxFQUFFLGNBQWMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQztRQUN6SCxPQUFPLFNBQVMsQ0FBQyxRQUFRLENBQUMsV0FBVyxFQUFFO1lBQ25DLElBQUksRUFBRSxjQUFjLENBQUMsSUFBSTtZQUN6QixTQUFTLEVBQUUsY0FBYyxDQUFDLFNBQVM7WUFDbkMsTUFBTSxFQUFFLE1BQU07U0FDakIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztTQUFNLENBQUM7UUFDSixPQUFPLGtCQUFrQixDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUMzRCxDQUFDO0FBQ0wsQ0FBQyxDQUFDO0FBWlcsUUFBQSx5QkFBeUIsNkJBWXBDO0FBRUYsU0FBUywyQkFBMkIsQ0FBQyxXQUF3Qjs7SUFDekQsS0FBSyxJQUFJLEtBQUssSUFBSSxNQUFBLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLGNBQWMsQ0FBQyxNQUFNLG1DQUFJLEVBQUUsRUFBRSxDQUFDO1FBQzdFLE1BQU0sU0FBUyxHQUFRLEtBQUssQ0FBQztRQUM3QixJQUFJLFNBQVMsWUFBWSxvQkFBVyxFQUFFLENBQUM7WUFDbkMsT0FBTyxTQUFTLENBQUM7UUFDckIsQ0FBQztJQUNMLENBQUM7SUFDRCxNQUFNLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0FBQ2pFLENBQUM7QUFFTSxNQUFNLGlDQUFpQyxHQUFHLFVBQVUsV0FBd0IsRUFBRSxjQUFtQztJQUNwSCxJQUFJLFdBQVcsQ0FBQyxrQkFBa0IsRUFBRSxDQUFDLGNBQWMsQ0FBQyxnQkFBZ0IsSUFBSSxnQkFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzdGLHVDQUF1QztRQUN2QyxjQUFjLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFDcEMsV0FBVyxDQUFDLGVBQWUsQ0FDdkIsSUFBQSxvQkFBWSxFQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsRUFDakMsY0FBYyxDQUFDLE1BQU0sQ0FDeEIsQ0FBQztRQUNGLDRGQUE0RjtRQUM1Riw2REFBNkQ7UUFDN0QsT0FBTyxJQUFJLHNCQUFTLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxRQUFRLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzdFLENBQUM7U0FBTSxDQUFDO1FBQ0osT0FBTyxrQkFBa0IsQ0FBQyxXQUFXLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDM0QsQ0FBQztBQUNMLENBQUMsQ0FBQztBQWRXLFFBQUEsaUNBQWlDLHFDQWM1QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBBcmdvQ0RBZGRPbiB9IGZyb20gXCIuLi8uLi9hZGRvbnNcIjtcbmltcG9ydCB7IEhlbG1DaGFydERlcGxveW1lbnQgfSBmcm9tIFwiLi4vaGVsbS1hZGRvbi9rdWJlY3RsLXByb3ZpZGVyXCI7XG5pbXBvcnQgeyBDbHVzdGVySW5mbywgR2l0T3BzTW9kZSB9IGZyb20gXCIuLi8uLi9zcGlcIjtcbmltcG9ydCB7IEt1YmVjdGxQcm92aWRlciB9IGZyb20gJy4uL2hlbG0tYWRkb24va3ViZWN0bC1wcm92aWRlcic7XG5pbXBvcnQgeyBrZWJhYlRvQ2FtZWwgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcblxuY29uc3Qgb3JpZ2luYWxIZWxtRGVwbG95ID0gS3ViZWN0bFByb3ZpZGVyLmFwcGx5SGVsbURlcGxveW1lbnQ7XG5cbmV4cG9ydCBjbGFzcyBBcmdvR2l0T3BzRmFjdG9yeSB7XG4gICAgcHVibGljIHN0YXRpYyBlbmFibGVHaXRPcHMoKSB7XG4gICAgICAgIEt1YmVjdGxQcm92aWRlci5hcHBseUhlbG1EZXBsb3ltZW50ID0gY3JlYXRlQXJnb0hlbG1BcHBsaWNhdGlvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGVuYWJsZUdpdE9wc0FwcE9mQXBwcygpIHtcbiAgICAgICAgS3ViZWN0bFByb3ZpZGVyLmFwcGx5SGVsbURlcGxveW1lbnQgPSBnZW5lcmF0ZUFyZ29IZWxtQXBwbGljYXRpb25WYWx1ZXM7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgY3JlYXRlQXJnb0hlbG1BcHBsaWNhdGlvbiA9IGZ1bmN0aW9uIChjbHVzdGVySW5mbzogQ2x1c3RlckluZm8sIGhlbG1EZXBsb3ltZW50OiBIZWxtQ2hhcnREZXBsb3ltZW50KTogQ29uc3RydWN0IHtcbiAgICBpZiAoY2x1c3RlckluZm8uZ2V0UmVzb3VyY2VDb250ZXh0KCkuYmx1ZXByaW50UHJvcHMuZW5hYmxlR2l0T3BzTW9kZSA9PSBHaXRPcHNNb2RlLkFQUExJQ0FUSU9OKSB7XG4gICAgICAgIGNvbnN0IGFyZ29BZGRPbiA9IGdldEFyZ29BcHBsaWNhdGlvbkdlbmVyYXRvcihjbHVzdGVySW5mbyk7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IGhlbG1EZXBsb3ltZW50LmRlcGVuZGVuY3lNb2RlID8geyBbaGVsbURlcGxveW1lbnQuY2hhcnRdOiBoZWxtRGVwbG95bWVudC52YWx1ZXMgfSA6IGhlbG1EZXBsb3ltZW50LnZhbHVlcztcbiAgICAgICAgcmV0dXJuIGFyZ29BZGRPbi5nZW5lcmF0ZShjbHVzdGVySW5mbywge1xuICAgICAgICAgICAgbmFtZTogaGVsbURlcGxveW1lbnQubmFtZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZTogaGVsbURlcGxveW1lbnQubmFtZXNwYWNlLFxuICAgICAgICAgICAgdmFsdWVzOiB2YWx1ZXMsXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbEhlbG1EZXBsb3koY2x1c3RlckluZm8sIGhlbG1EZXBsb3ltZW50KTtcbiAgICB9XG59O1xuXG5mdW5jdGlvbiBnZXRBcmdvQXBwbGljYXRpb25HZW5lcmF0b3IoY2x1c3RlckluZm86IENsdXN0ZXJJbmZvKTogQXJnb0NEQWRkT24ge1xuICAgIGZvciAobGV0IGFkZE9uIG9mIGNsdXN0ZXJJbmZvLmdldFJlc291cmNlQ29udGV4dCgpLmJsdWVwcmludFByb3BzLmFkZE9ucyA/PyBbXSkge1xuICAgICAgICBjb25zdCBnZW5lcmF0b3I6IGFueSA9IGFkZE9uO1xuICAgICAgICBpZiAoZ2VuZXJhdG9yIGluc3RhbmNlb2YgQXJnb0NEQWRkT24pIHtcbiAgICAgICAgICAgIHJldHVybiBnZW5lcmF0b3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgRXJyb3IoXCJHaXRPcHMgRW5naW5lIGlzIG5vdCBkZWZpbmVkIGluIHRoZSBibHVlcHJpbnRcIik7XG59XG5cbmV4cG9ydCBjb25zdCBnZW5lcmF0ZUFyZ29IZWxtQXBwbGljYXRpb25WYWx1ZXMgPSBmdW5jdGlvbiAoY2x1c3RlckluZm86IENsdXN0ZXJJbmZvLCBoZWxtRGVwbG95bWVudDogSGVsbUNoYXJ0RGVwbG95bWVudCk6IENvbnN0cnVjdCB7XG4gICAgaWYgKGNsdXN0ZXJJbmZvLmdldFJlc291cmNlQ29udGV4dCgpLmJsdWVwcmludFByb3BzLmVuYWJsZUdpdE9wc01vZGUgPT0gR2l0T3BzTW9kZS5BUFBfT0ZfQVBQUykge1xuICAgICAgICAvLyBBZGQgYGVuYWJsZWRgIHByb3BlcnR5IHRvIGVhY2ggYWRkb25cbiAgICAgICAgaGVsbURlcGxveW1lbnQudmFsdWVzLmVuYWJsZSA9IHRydWU7XG4gICAgICAgIGNsdXN0ZXJJbmZvLmFkZEFkZE9uQ29udGV4dChcbiAgICAgICAgICAgIGtlYmFiVG9DYW1lbChoZWxtRGVwbG95bWVudC5uYW1lKSxcbiAgICAgICAgICAgIGhlbG1EZXBsb3ltZW50LnZhbHVlcyxcbiAgICAgICAgKTtcbiAgICAgICAgLy8gTm8gZGVwZW5kZW5jaWVzIHJlcXVpcmVkIGJlY2F1c2UgdGhlIHZhbHVlcyBhcmUgdXNlZCBhdCBwb3N0RGVwbG95IHN0YWdlIG9mIEFyZ29DRCBBZGRPbi5cbiAgICAgICAgLy8gR2VuZXJhdGUgZHVtbXkgY29uc3RydWN0IHRvIG1lZXQgdGhlIGZ1bmN0aW9uIHJlcXVpcmVtZW50LlxuICAgICAgICByZXR1cm4gbmV3IENvbnN0cnVjdChjbHVzdGVySW5mby5jbHVzdGVyLCBgZHVtbXkke2hlbG1EZXBsb3ltZW50Lm5hbWV9YCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsSGVsbURlcGxveShjbHVzdGVySW5mbywgaGVsbURlcGxveW1lbnQpO1xuICAgIH1cbn07XG4iXX0=