"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.IngressNginxAddOn = void 0;
const ts_deepmerge_1 = require("ts-deepmerge");
const dot = require("dot-object");
const utils_1 = require("../../utils");
const object_utils_1 = require("../../utils/object-utils");
const helm_addon_1 = require("../helm-addon");
const __1 = require("..");
// Set default properties for the add-on
const defaultProps = {
    name: "kubernetes-ingress",
    chart: "ingress-nginx",
    release: "k8s-ingress",
    version: "4.10.1",
    repository: "https://kubernetes.github.io/ingress-nginx",
    backendProtocol: 'http',
    crossZoneEnabled: true,
    internetFacing: true,
    targetType: 'ip',
    namespace: 'kube-system',
    sslPort: 'https',
    httpTargetPort: 'http',
    httpsTargetPort: 'https',
    forceSSLRedirect: true,
    loadBalancerType: 'external',
    serviceType: "LoadBalancer",
    idleTimeout: '3600'
};
// Define the class for the Kubernetes Ingress Add-On, extending HelmAddOn
let IngressNginxAddOn = class IngressNginxAddOn extends helm_addon_1.HelmAddOn {
    // Constructor for the class, merging default props with user-defined props
    constructor(props) {
        super({ ...defaultProps, ...props });
        this.options = { ...defaultProps, ...props };
    }
    // Dependency decorator to ensure this add-on is deployed after the AWS Load Balancer Controller
    async deploy(clusterInfo) {
        var _a, _b;
        const props = this.options;
        // Setup service annotations based on the properties provided
        const loadBalancerAnnotations = {
            'service.beta.kubernetes.io/aws-load-balancer-backend-protocol': props.backendProtocol,
            'service.beta.kubernetes.io/aws-load-balancer-attributes': `load_balancing.cross_zone.enabled=${props.crossZoneEnabled}`,
            'service.beta.kubernetes.io/aws-load-balancer-scheme': props.internetFacing ? 'internet-facing' : 'internal',
            'service.beta.kubernetes.io/aws-load-balancer-type': props.loadBalancerType,
            'service.beta.kubernetes.io/aws-load-balancer-nlb-target-type': props.targetType,
            'external-dns.alpha.kubernetes.io/hostname': props.externalDnsHostname,
            'service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout': '3600'
        };
        // Define values for Helm chart based on properties and annotations
        const values = {
            controller: {
                service: {
                    annotations: props.serviceType == 'LoadBalancer' ? loadBalancerAnnotations : {}
                },
                ingressClassResource: {
                    name: props.ingressClassName || "ingress-nginx",
                    enabled: true,
                    default: (_a = props.isDefaultClass) !== null && _a !== void 0 ? _a : false,
                    controllerValue: props.controllerClass || "k8s.io/ingress-nginx"
                },
                electionID: props.electionId || "ingress-controller-leader"
            }
        };
        // Combine logic for handling certificate annotations
        let certificateResourceARN = props.certificateResourceARN;
        if (!certificateResourceARN && props.certificateResourceName) {
            const certificate = clusterInfo.getResource(props.certificateResourceName);
            certificateResourceARN = certificate === null || certificate === void 0 ? void 0 : certificate.certificateArn;
        }
        if (certificateResourceARN) {
            loadBalancerAnnotations['service.beta.kubernetes.io/aws-load-balancer-ssl-ports'] = props.sslPort;
            loadBalancerAnnotations['service.beta.kubernetes.io/aws-load-balancer-ssl-cert'] = certificateResourceARN;
            if (props.forceSSLRedirect) {
                loadBalancerAnnotations['nginx.ingress.kubernetes.io/force-ssl-redirect'] = true;
            }
        }
        // Set HTTP and HTTPS target ports
        (0, object_utils_1.setPath)(values, "controller.service.targetPorts.http", props.httpTargetPort);
        const httpsTargetPort = dot.pick("controller.service.targetPorts.https", props.values) || props.httpsTargetPort;
        (0, object_utils_1.setPath)(values, "controller.service.targetPorts.https", httpsTargetPort);
        // Merge user-defined values with defaults for the Helm chart deployment
        const mergedValues = (0, ts_deepmerge_1.merge)(values, (_b = this.props.values) !== null && _b !== void 0 ? _b : {});
        const nginxHelmChart = this.addHelmChart(clusterInfo, mergedValues);
        return Promise.resolve(nginxHelmChart);
    }
};
exports.IngressNginxAddOn = IngressNginxAddOn;
__decorate([
    (0, utils_1.dependable)(__1.AwsLoadBalancerControllerAddOn.name)
], IngressNginxAddOn.prototype, "deploy", null);
exports.IngressNginxAddOn = IngressNginxAddOn = __decorate([
    utils_1.supportsALL
], IngressNginxAddOn);
//# sourceMappingURL=data:application/json;base64,