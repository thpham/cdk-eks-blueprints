"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudWatchAdotAddOn = void 0;
const utils_1 = require("../../utils");
const adot_1 = require("../adot");
const kubectl_provider_1 = require("../helm-addon/kubectl-provider");
/**
 * Defaults options for the add-on
 */
const defaultProps = {
    deploymentMode: "deployment" /* cloudWatchDeploymentMode.DEPLOYMENT */,
    namespace: 'default',
    name: 'adot-collector-cloudwatch',
    metricsNameSelectors: ['apiserver_request_.*', 'container_memory_.*', 'container_threads', 'otelcol_process_.*'],
    podLabelRegex: '.*'
};
/**
 * Implementation of CloudWatch ADOT add-on for EKS Blueprints. Installs ADOT Collector.
 */
let CloudWatchAdotAddOn = class CloudWatchAdotAddOn {
    constructor(props) {
        this.cloudWatchAddOnProps = { ...defaultProps, ...props };
    }
    deploy(clusterInfo) {
        var _a, _b;
        const cluster = clusterInfo.cluster;
        // Applying manifest for configuring ADOT Collector for CloudWatch.
        const doc = (0, utils_1.readYamlDocument)(__dirname + '/collector-config-cloudwatch.ytpl');
        const manifest = doc.split("---").map(e => (0, utils_1.loadYaml)(e));
        const values = {
            awsRegion: cluster.stack.region,
            deploymentMode: this.cloudWatchAddOnProps.deploymentMode,
            namespace: this.cloudWatchAddOnProps.namespace,
            clusterName: cluster.clusterName,
            metricsNameSelectors: (_a = this.cloudWatchAddOnProps.metricsNameSelectors) !== null && _a !== void 0 ? _a : defaultProps.metricsNameSelectors,
            podLabelRegex: (_b = this.cloudWatchAddOnProps.podLabelRegex) !== null && _b !== void 0 ? _b : defaultProps.podLabelRegex
        };
        const manifestDeployment = {
            name: this.cloudWatchAddOnProps.name,
            namespace: this.cloudWatchAddOnProps.namespace,
            manifest,
            values
        };
        const kubectlProvider = new kubectl_provider_1.KubectlProvider(clusterInfo);
        const statement = kubectlProvider.addManifest(manifestDeployment);
        return Promise.resolve(statement);
    }
};
exports.CloudWatchAdotAddOn = CloudWatchAdotAddOn;
__decorate([
    (0, utils_1.dependable)(adot_1.AdotCollectorAddOn.name)
], CloudWatchAdotAddOn.prototype, "deploy", null);
exports.CloudWatchAdotAddOn = CloudWatchAdotAddOn = __decorate([
    utils_1.supportsALL
], CloudWatchAdotAddOn);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvYWRkb25zL2Nsb3Vkd2F0Y2gtYWRvdC1hZGRvbi9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFDQSx1Q0FBa0Y7QUFDbEYsa0NBQTZDO0FBRTdDLHFFQUFxRjtBQWdEckY7O0dBRUc7QUFDSCxNQUFNLFlBQVksR0FBNkI7SUFDM0MsY0FBYyx3REFBcUM7SUFDbkQsU0FBUyxFQUFFLFNBQVM7SUFDcEIsSUFBSSxFQUFFLDJCQUEyQjtJQUNqQyxvQkFBb0IsRUFBRSxDQUFDLHNCQUFzQixFQUFFLHFCQUFxQixFQUFFLG1CQUFtQixFQUFFLG9CQUFvQixDQUFDO0lBQ2hILGFBQWEsRUFBRSxJQUFJO0NBQ3RCLENBQUM7QUFFRjs7R0FFRztBQUVJLElBQU0sbUJBQW1CLEdBQXpCLE1BQU0sbUJBQW1CO0lBSTVCLFlBQVksS0FBZ0M7UUFDeEMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsR0FBRyxZQUFZLEVBQUUsR0FBRyxLQUFLLEVBQUUsQ0FBQztJQUM5RCxDQUFDO0lBR0QsTUFBTSxDQUFDLFdBQXdCOztRQUMzQixNQUFNLE9BQU8sR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO1FBRXBDLG1FQUFtRTtRQUNuRSxNQUFNLEdBQUcsR0FBRyxJQUFBLHdCQUFnQixFQUFDLFNBQVMsR0FBRSxtQ0FBbUMsQ0FBQyxDQUFDO1FBQzdFLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBQSxnQkFBUSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEQsTUFBTSxNQUFNLEdBQVc7WUFDbkIsU0FBUyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTTtZQUMvQixjQUFjLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGNBQWM7WUFDeEQsU0FBUyxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxTQUFTO1lBQzlDLFdBQVcsRUFBRSxPQUFPLENBQUMsV0FBVztZQUNoQyxvQkFBb0IsRUFBRSxNQUFBLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxvQkFBb0IsbUNBQUcsWUFBWSxDQUFDLG9CQUFvQjtZQUN4RyxhQUFhLEVBQUUsTUFBQSxJQUFJLENBQUMsb0JBQW9CLENBQUMsYUFBYSxtQ0FBRyxZQUFZLENBQUMsYUFBYTtTQUNyRixDQUFDO1FBRUYsTUFBTSxrQkFBa0IsR0FBdUI7WUFDNUMsSUFBSSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFLO1lBQ3JDLFNBQVMsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsU0FBVTtZQUMvQyxRQUFRO1lBQ1IsTUFBTTtTQUNULENBQUM7UUFFRixNQUFNLGVBQWUsR0FBRyxJQUFJLGtDQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekQsTUFBTSxTQUFTLEdBQUcsZUFBZSxDQUFDLFdBQVcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2xFLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN0QyxDQUFDO0NBQ0osQ0FBQTtBQW5DWSxrREFBbUI7QUFTNUI7SUFEQyxJQUFBLGtCQUFVLEVBQUMseUJBQWtCLENBQUMsSUFBSSxDQUFDO2lEQTBCbkM7OEJBbENRLG1CQUFtQjtJQUQvQixtQkFBVztHQUNDLG1CQUFtQixDQW1DL0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDbHVzdGVyQWRkT24sIENsdXN0ZXJJbmZvLCBWYWx1ZXMgfSBmcm9tIFwiLi4vLi4vc3BpXCI7XG5pbXBvcnQgeyBkZXBlbmRhYmxlLCBsb2FkWWFtbCwgcmVhZFlhbWxEb2N1bWVudCwgc3VwcG9ydHNBTEwgfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcbmltcG9ydCB7IEFkb3RDb2xsZWN0b3JBZGRPbiB9IGZyb20gXCIuLi9hZG90XCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IEt1YmVjdGxQcm92aWRlciwgTWFuaWZlc3REZXBsb3ltZW50IH0gZnJvbSBcIi4uL2hlbG0tYWRkb24va3ViZWN0bC1wcm92aWRlclwiO1xuXG4vKipcbiAqIFRoaXMgQ2xvdWRXYXRjaCBBRE9UIEFkZG9uIGRlcGxveXMgYW4gQVdTIERpc3RybyBmb3IgT3BlblRlbGVtZXRyeSAoQURPVCkgQ29sbGVjdG9yIGZvciBcbiAqIENsb3VkV2F0Y2ggd2hpY2ggcmVjZWl2ZXMgbWV0cmljcyBhbmQgbG9ncyBmcm9tIHRoZSBhcHBsaWNhdGlvbiBhbmQgc2VuZHMgdGhlIHNhbWUgdG8gXG4gKiBDbG91ZFdhdGNoIGNvbnNvbGUuIFlvdSBjYW4gY2hhbmdlIHRoZSBtb2RlIHRvIERhZW1vbnNldCwgU3RhdGVmdWxTZXQsIGFuZCBTaWRlY2FyIFxuICogZGVwZW5kaW5nIG9uIHlvdXIgZGVwbG95bWVudCBzdHJhdGVneS5cbiAqL1xuXG4vKipcbiAqIENvbmZpZ3VyYXRpb24gb3B0aW9ucyBmb3IgQ2xvdWRXYXRjaCBBZG90IGFkZC1vbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDbG91ZFdhdGNoQWRvdEFkZE9uUHJvcHMge1xuICAgIC8qKlxuICAgICAqIE1vZGVzIHN1cHBvcnRlZCA6IGBkZXBsb3ltZW50YCwgYGRhZW1vbnNldGAsIGBzdGF0ZWZ1bFNldGAsIGFuZCBgc2lkZWNhcmBcbiAgICAgKiBAZGVmYXVsdCBkZXBsb3ltZW50XG4gICAgICovXG4gICAgZGVwbG95bWVudE1vZGU/OiBjbG91ZFdhdGNoRGVwbG95bWVudE1vZGU7XG4gICAgLyoqXG4gICAgICogTmFtZXNwYWNlIHRvIGRlcGxveSB0aGUgQURPVCBDb2xsZWN0b3IgZm9yIENsb3VkV2F0Y2guXG4gICAgICogQGRlZmF1bHQgZGVmYXVsdFxuICAgICAqL1xuICAgIG5hbWVzcGFjZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBOYW1lIHRvIGRlcGxveSB0aGUgQURPVCBDb2xsZWN0b3IgZm9yIENsb3VkV2F0Y2guXG4gICAgICogQGRlZmF1bHQgJ2Fkb3QtY29sbGVjdG9yLWNsb3Vkd2F0Y2gnXG4gICAgICovXG4gICAgbmFtZT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBNZXRyaWNzIG5hbWUgc2VsZWN0b3JzIHRvIHdyaXRlIHRvIENsb3VkV2F0Y2guXG4gICAgICogQGRlZmF1bHQgXCJbJ2FwaXNlcnZlcl9yZXF1ZXN0Xy4qJywgJ2NvbnRhaW5lcl9tZW1vcnlfLionLCAnY29udGFpbmVyX3RocmVhZHMnLCAnb3RlbGNvbF9wcm9jZXNzXy4qJ11cIlxuICAgICAqL1xuICAgIG1ldHJpY3NOYW1lU2VsZWN0b3JzPzogc3RyaW5nW107XG4gICAgLyoqXG4gICAgICogTGFiZWxzIG9mIFBvZHMgdG8gc2VsZWN0IHlvdXIgYXBwbGljYXRpb24gcG9kcyBlbWl0dGluZyBjdXN0b20gbWV0cmljcy5cbiAgICAgKiBFeGFtcGxlICdmcm9udGVuZHxkb3duc3RyZWFtKC4qKSdcbiAgICAgKiBAZGVmYXVsdCAnLionXG4gICAgICovXG4gICAgIHBvZExhYmVsUmVnZXg/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBlbnVtIGNsb3VkV2F0Y2hEZXBsb3ltZW50TW9kZSB7XG4gICAgREVQTE9ZTUVOVCA9ICdkZXBsb3ltZW50JyxcbiAgICBEQUVNT05TRVQgPSAnZGFlbW9uc2V0JyxcbiAgICBTVEFURUZVTFNFVCA9ICdzdGF0ZWZ1bHNldCcsXG4gICAgU0lERUNBUiA9ICdzaWRlY2FyJ1xufVxuXG4vKipcbiAqIERlZmF1bHRzIG9wdGlvbnMgZm9yIHRoZSBhZGQtb25cbiAqL1xuY29uc3QgZGVmYXVsdFByb3BzOiBDbG91ZFdhdGNoQWRvdEFkZE9uUHJvcHMgPSB7XG4gICAgZGVwbG95bWVudE1vZGU6IGNsb3VkV2F0Y2hEZXBsb3ltZW50TW9kZS5ERVBMT1lNRU5ULFxuICAgIG5hbWVzcGFjZTogJ2RlZmF1bHQnLFxuICAgIG5hbWU6ICdhZG90LWNvbGxlY3Rvci1jbG91ZHdhdGNoJyxcbiAgICBtZXRyaWNzTmFtZVNlbGVjdG9yczogWydhcGlzZXJ2ZXJfcmVxdWVzdF8uKicsICdjb250YWluZXJfbWVtb3J5Xy4qJywgJ2NvbnRhaW5lcl90aHJlYWRzJywgJ290ZWxjb2xfcHJvY2Vzc18uKiddLFxuICAgIHBvZExhYmVsUmVnZXg6ICcuKidcbn07XG5cbi8qKlxuICogSW1wbGVtZW50YXRpb24gb2YgQ2xvdWRXYXRjaCBBRE9UIGFkZC1vbiBmb3IgRUtTIEJsdWVwcmludHMuIEluc3RhbGxzIEFET1QgQ29sbGVjdG9yLlxuICovXG5Ac3VwcG9ydHNBTExcbmV4cG9ydCBjbGFzcyBDbG91ZFdhdGNoQWRvdEFkZE9uIGltcGxlbWVudHMgQ2x1c3RlckFkZE9uIHtcblxuICAgIHJlYWRvbmx5IGNsb3VkV2F0Y2hBZGRPblByb3BzOiBDbG91ZFdhdGNoQWRvdEFkZE9uUHJvcHM7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcz86IENsb3VkV2F0Y2hBZG90QWRkT25Qcm9wcykge1xuICAgICAgICB0aGlzLmNsb3VkV2F0Y2hBZGRPblByb3BzID0geyAuLi5kZWZhdWx0UHJvcHMsIC4uLnByb3BzIH07XG4gICAgfVxuXG4gICAgQGRlcGVuZGFibGUoQWRvdENvbGxlY3RvckFkZE9uLm5hbWUpXG4gICAgZGVwbG95KGNsdXN0ZXJJbmZvOiBDbHVzdGVySW5mbyk6IFByb21pc2U8Q29uc3RydWN0PiB7XG4gICAgICAgIGNvbnN0IGNsdXN0ZXIgPSBjbHVzdGVySW5mby5jbHVzdGVyO1xuXG4gICAgICAgIC8vIEFwcGx5aW5nIG1hbmlmZXN0IGZvciBjb25maWd1cmluZyBBRE9UIENvbGxlY3RvciBmb3IgQ2xvdWRXYXRjaC5cbiAgICAgICAgY29uc3QgZG9jID0gcmVhZFlhbWxEb2N1bWVudChfX2Rpcm5hbWUgKycvY29sbGVjdG9yLWNvbmZpZy1jbG91ZHdhdGNoLnl0cGwnKTtcbiAgICAgICAgY29uc3QgbWFuaWZlc3QgPSBkb2Muc3BsaXQoXCItLS1cIikubWFwKGUgPT4gbG9hZFlhbWwoZSkpO1xuICAgICAgICBjb25zdCB2YWx1ZXM6IFZhbHVlcyA9IHtcbiAgICAgICAgICAgIGF3c1JlZ2lvbjogY2x1c3Rlci5zdGFjay5yZWdpb24sXG4gICAgICAgICAgICBkZXBsb3ltZW50TW9kZTogdGhpcy5jbG91ZFdhdGNoQWRkT25Qcm9wcy5kZXBsb3ltZW50TW9kZSxcbiAgICAgICAgICAgIG5hbWVzcGFjZTogdGhpcy5jbG91ZFdhdGNoQWRkT25Qcm9wcy5uYW1lc3BhY2UsXG4gICAgICAgICAgICBjbHVzdGVyTmFtZTogY2x1c3Rlci5jbHVzdGVyTmFtZSxcbiAgICAgICAgICAgIG1ldHJpY3NOYW1lU2VsZWN0b3JzOiB0aGlzLmNsb3VkV2F0Y2hBZGRPblByb3BzLm1ldHJpY3NOYW1lU2VsZWN0b3JzPz8gZGVmYXVsdFByb3BzLm1ldHJpY3NOYW1lU2VsZWN0b3JzLFxuICAgICAgICAgICAgcG9kTGFiZWxSZWdleDogdGhpcy5jbG91ZFdhdGNoQWRkT25Qcm9wcy5wb2RMYWJlbFJlZ2V4Pz8gZGVmYXVsdFByb3BzLnBvZExhYmVsUmVnZXhcbiAgICAgICAgIH07XG4gICAgICAgICBcbiAgICAgICAgIGNvbnN0IG1hbmlmZXN0RGVwbG95bWVudDogTWFuaWZlc3REZXBsb3ltZW50ID0ge1xuICAgICAgICAgICAgbmFtZTogdGhpcy5jbG91ZFdhdGNoQWRkT25Qcm9wcy5uYW1lISxcbiAgICAgICAgICAgIG5hbWVzcGFjZTogdGhpcy5jbG91ZFdhdGNoQWRkT25Qcm9wcy5uYW1lc3BhY2UhLFxuICAgICAgICAgICAgbWFuaWZlc3QsXG4gICAgICAgICAgICB2YWx1ZXNcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBrdWJlY3RsUHJvdmlkZXIgPSBuZXcgS3ViZWN0bFByb3ZpZGVyKGNsdXN0ZXJJbmZvKTtcbiAgICAgICAgY29uc3Qgc3RhdGVtZW50ID0ga3ViZWN0bFByb3ZpZGVyLmFkZE1hbmlmZXN0KG1hbmlmZXN0RGVwbG95bWVudCk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc3RhdGVtZW50KTtcbiAgICB9XG59Il19