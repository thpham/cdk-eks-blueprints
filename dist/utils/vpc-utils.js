"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tagSecurityGroup = tagSecurityGroup;
exports.tagSubnets = tagSubnets;
const ec2 = require("aws-cdk-lib/aws-ec2");
const custom_resources_1 = require("aws-cdk-lib/custom-resources");
/**
 * Tags EC2 Security Group with given tag and value - used for EKS Security Group Tagging
 * @param stack - CDK Stack
 * @param securityGroupId - Security Group Resource ID
 * @param key - Tag Key
 * @param value - Tag Value
 */
function tagSecurityGroup(stack, securityGroupId, key, value) {
    const tags = [{
            Key: key,
            Value: value
        }];
    const arn = `arn:${stack.partition}:ec2:${stack.region}:${stack.account}:security-group/` + securityGroupId;
    const parameters = {
        Resources: [securityGroupId],
        Tags: tags
    };
    applyEC2Tag("eks-sg", stack, parameters, key, [arn]);
}
/**
 * Tags VPC Subnets with given tag and value.
 * @param stack - CDK Stack
 * @param subnets - a list of subnets
 * @param key - Tag Key
 * @param value - Tag Value
 */
function tagSubnets(stack, subnets, key, value) {
    for (const subnet of subnets) {
        if (!ec2.Subnet.isVpcSubnet(subnet)) {
            throw new Error('This is not a valid subnet.');
        }
    }
    const tags = [{
            Key: key,
            Value: value
        }];
    const arns = subnets.map(function (val, _) {
        return `arn:${stack.partition}:ec2:${stack.region}:${stack.account}:subnet/` + val.subnetId;
    });
    const parameters = {
        Resources: subnets.map((arn) => arn.subnetId),
        Tags: tags
    };
    applyEC2Tag("subnet", stack, parameters, key, arns);
}
function applyEC2Tag(id, stack, parameters, tag, resources) {
    const sdkCall = {
        service: 'EC2',
        action: 'createTags',
        parameters: parameters,
        physicalResourceId: { id: `${tag}-${id}-Tagger` }
    };
    new custom_resources_1.AwsCustomResource(stack, `${id}-tags-${tag}`, {
        policy: custom_resources_1.AwsCustomResourcePolicy.fromSdkCalls({
            resources: resources,
        }),
        onCreate: sdkCall,
        onUpdate: sdkCall,
        onDelete: {
            ...sdkCall,
            action: 'deleteTags',
        },
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnBjLXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3V0aWxzL3ZwYy11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVdBLDRDQWNDO0FBU0QsZ0NBd0JDO0FBMURELDJDQUEyQztBQUUzQyxtRUFBc0c7QUFFdEc7Ozs7OztHQU1HO0FBQ0gsU0FBZ0IsZ0JBQWdCLENBQUMsS0FBWSxFQUFFLGVBQXVCLEVBQUUsR0FBVyxFQUFFLEtBQWE7SUFDOUYsTUFBTSxJQUFJLEdBQUcsQ0FBQztZQUNWLEdBQUcsRUFBRSxHQUFHO1lBQ1IsS0FBSyxFQUFFLEtBQUs7U0FDZixDQUFDLENBQUM7SUFFSCxNQUFNLEdBQUcsR0FBRyxPQUFPLEtBQUssQ0FBQyxTQUFTLFFBQVEsS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxrQkFBa0IsR0FBQyxlQUFlLENBQUM7SUFFMUcsTUFBTSxVQUFVLEdBQUc7UUFDZixTQUFTLEVBQUUsQ0FBQyxlQUFlLENBQUM7UUFDNUIsSUFBSSxFQUFFLElBQUk7S0FDYixDQUFDO0lBRUYsV0FBVyxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7QUFDekQsQ0FBQztBQUVEOzs7Ozs7R0FNRztBQUNILFNBQWdCLFVBQVUsQ0FBQyxLQUFZLEVBQUUsT0FBc0IsRUFBRSxHQUFXLEVBQUUsS0FBYTtJQUN2RixLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sRUFBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1lBQ2xDLE1BQU0sSUFBSSxLQUFLLENBQ1gsNkJBQTZCLENBQ2hDLENBQUM7UUFDTixDQUFDO0lBQ0wsQ0FBQztJQUVELE1BQU0sSUFBSSxHQUFHLENBQUM7WUFDVixHQUFHLEVBQUUsR0FBRztZQUNSLEtBQUssRUFBRSxLQUFLO1NBQ2YsQ0FBQyxDQUFDO0lBRUgsTUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BDLE9BQU8sT0FBTyxLQUFLLENBQUMsU0FBUyxRQUFRLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sVUFBVSxHQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7SUFDOUYsQ0FBQyxDQUFDLENBQUM7SUFFSCxNQUFNLFVBQVUsR0FBRztRQUNmLFNBQVMsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDO1FBQzdDLElBQUksRUFBRSxJQUFJO0tBQ2IsQ0FBQztJQUVGLFdBQVcsQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDeEQsQ0FBQztBQUVELFNBQVMsV0FBVyxDQUFFLEVBQVUsRUFBRSxLQUFZLEVBQUUsVUFBOEIsRUFBRSxHQUFXLEVBQUUsU0FBbUI7SUFDNUcsTUFBTSxPQUFPLEdBQWU7UUFDeEIsT0FBTyxFQUFFLEtBQUs7UUFDZCxNQUFNLEVBQUUsWUFBWTtRQUNwQixVQUFVLEVBQUUsVUFBVTtRQUN0QixrQkFBa0IsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEdBQUcsSUFBSSxFQUFFLFNBQVMsRUFBQztLQUNuRCxDQUFDO0lBRUYsSUFBSSxvQ0FBaUIsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLFNBQVMsR0FBRyxFQUFFLEVBQUU7UUFDOUMsTUFBTSxFQUFFLDBDQUF1QixDQUFDLFlBQVksQ0FBQztZQUN6QyxTQUFTLEVBQUUsU0FBUztTQUN2QixDQUFDO1FBRUYsUUFBUSxFQUFFLE9BQU87UUFDakIsUUFBUSxFQUFFLE9BQU87UUFDakIsUUFBUSxFQUFFO1lBQ04sR0FBRyxPQUFPO1lBQ1YsTUFBTSxFQUFFLFlBQVk7U0FDdkI7S0FDSixDQUFDLENBQUM7QUFDUCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZWMyIGZyb20gJ2F3cy1jZGstbGliL2F3cy1lYzInO1xuaW1wb3J0IHsgU3RhY2sgfSBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBBd3NDdXN0b21SZXNvdXJjZSwgQXdzQ3VzdG9tUmVzb3VyY2VQb2xpY3ksIEF3c1Nka0NhbGwgfSBmcm9tIFwiYXdzLWNkay1saWIvY3VzdG9tLXJlc291cmNlc1wiO1xuXG4vKipcbiAqIFRhZ3MgRUMyIFNlY3VyaXR5IEdyb3VwIHdpdGggZ2l2ZW4gdGFnIGFuZCB2YWx1ZSAtIHVzZWQgZm9yIEVLUyBTZWN1cml0eSBHcm91cCBUYWdnaW5nXG4gKiBAcGFyYW0gc3RhY2sgLSBDREsgU3RhY2tcbiAqIEBwYXJhbSBzZWN1cml0eUdyb3VwSWQgLSBTZWN1cml0eSBHcm91cCBSZXNvdXJjZSBJRFxuICogQHBhcmFtIGtleSAtIFRhZyBLZXlcbiAqIEBwYXJhbSB2YWx1ZSAtIFRhZyBWYWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFnU2VjdXJpdHlHcm91cChzdGFjazogU3RhY2ssIHNlY3VyaXR5R3JvdXBJZDogc3RyaW5nLCBrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IHRhZ3MgPSBbe1xuICAgICAgICBLZXk6IGtleSxcbiAgICAgICAgVmFsdWU6IHZhbHVlXG4gICAgfV07XG5cbiAgICBjb25zdCBhcm4gPSBgYXJuOiR7c3RhY2sucGFydGl0aW9ufTplYzI6JHtzdGFjay5yZWdpb259OiR7c3RhY2suYWNjb3VudH06c2VjdXJpdHktZ3JvdXAvYCtzZWN1cml0eUdyb3VwSWQ7XG5cbiAgICBjb25zdCBwYXJhbWV0ZXJzID0ge1xuICAgICAgICBSZXNvdXJjZXM6IFtzZWN1cml0eUdyb3VwSWRdLFxuICAgICAgICBUYWdzOiB0YWdzXG4gICAgfTtcblxuICAgIGFwcGx5RUMyVGFnKFwiZWtzLXNnXCIsIHN0YWNrLCBwYXJhbWV0ZXJzLCBrZXksIFthcm5dKTtcbn1cblxuLyoqXG4gKiBUYWdzIFZQQyBTdWJuZXRzIHdpdGggZ2l2ZW4gdGFnIGFuZCB2YWx1ZS5cbiAqIEBwYXJhbSBzdGFjayAtIENESyBTdGFja1xuICogQHBhcmFtIHN1Ym5ldHMgLSBhIGxpc3Qgb2Ygc3VibmV0c1xuICogQHBhcmFtIGtleSAtIFRhZyBLZXlcbiAqIEBwYXJhbSB2YWx1ZSAtIFRhZyBWYWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdGFnU3VibmV0cyhzdGFjazogU3RhY2ssIHN1Ym5ldHM6IGVjMi5JU3VibmV0W10sIGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBzdWJuZXQgb2Ygc3VibmV0cyl7XG4gICAgICAgIGlmICghZWMyLlN1Ym5ldC5pc1ZwY1N1Ym5ldChzdWJuZXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgJ1RoaXMgaXMgbm90IGEgdmFsaWQgc3VibmV0LidcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gXG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHRhZ3MgPSBbe1xuICAgICAgICBLZXk6IGtleSxcbiAgICAgICAgVmFsdWU6IHZhbHVlXG4gICAgfV07XG5cbiAgICBjb25zdCBhcm5zID0gc3VibmV0cy5tYXAoZnVuY3Rpb24odmFsLCBfKXtcbiAgICAgICAgcmV0dXJuIGBhcm46JHtzdGFjay5wYXJ0aXRpb259OmVjMjoke3N0YWNrLnJlZ2lvbn06JHtzdGFjay5hY2NvdW50fTpzdWJuZXQvYCt2YWwuc3VibmV0SWQ7XG4gICAgfSk7XG5cbiAgICBjb25zdCBwYXJhbWV0ZXJzID0ge1xuICAgICAgICBSZXNvdXJjZXM6IHN1Ym5ldHMubWFwKChhcm4pID0+IGFybi5zdWJuZXRJZCksXG4gICAgICAgIFRhZ3M6IHRhZ3NcbiAgICB9O1xuXG4gICAgYXBwbHlFQzJUYWcoXCJzdWJuZXRcIiwgc3RhY2ssIHBhcmFtZXRlcnMsIGtleSwgYXJucyk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5RUMyVGFnKCBpZDogc3RyaW5nLCBzdGFjazogU3RhY2ssIHBhcmFtZXRlcnM6IFJlY29yZDxzdHJpbmcsYW55PiwgdGFnOiBzdHJpbmcsIHJlc291cmNlczogc3RyaW5nW10pOiB2b2lkIHtcbiAgICBjb25zdCBzZGtDYWxsOiBBd3NTZGtDYWxsID0ge1xuICAgICAgICBzZXJ2aWNlOiAnRUMyJyxcbiAgICAgICAgYWN0aW9uOiAnY3JlYXRlVGFncycsXG4gICAgICAgIHBhcmFtZXRlcnM6IHBhcmFtZXRlcnMsXG4gICAgICAgIHBoeXNpY2FsUmVzb3VyY2VJZDogeyBpZDogYCR7dGFnfS0ke2lkfS1UYWdnZXJgfVxuICAgIH07XG4gICAgXG4gICAgbmV3IEF3c0N1c3RvbVJlc291cmNlKHN0YWNrLCBgJHtpZH0tdGFncy0ke3RhZ31gLCB7XG4gICAgICAgIHBvbGljeTogQXdzQ3VzdG9tUmVzb3VyY2VQb2xpY3kuZnJvbVNka0NhbGxzKHtcbiAgICAgICAgICAgIHJlc291cmNlczogcmVzb3VyY2VzLFxuICAgICAgICB9KSxcblxuICAgICAgICBvbkNyZWF0ZTogc2RrQ2FsbCxcbiAgICAgICAgb25VcGRhdGU6IHNka0NhbGwsXG4gICAgICAgIG9uRGVsZXRlOiB7IFxuICAgICAgICAgICAgLi4uc2RrQ2FsbCwgXG4gICAgICAgICAgICBhY3Rpb246ICdkZWxldGVUYWdzJyxcbiAgICAgICAgfSxcbiAgICB9KTtcbn0iXX0=