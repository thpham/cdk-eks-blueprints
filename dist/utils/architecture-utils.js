"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addonArchitectureMap = exports.ArchType = void 0;
exports.isSupportedArchitecture = isSupportedArchitecture;
exports.validateSupportedArchitecture = validateSupportedArchitecture;
exports.supportsX86 = supportsX86;
exports.supportsARM = supportsARM;
exports.supportsALL = supportsALL;
var ArchType;
(function (ArchType) {
    ArchType["ARM"] = "arm";
    ArchType["X86"] = "x86";
})(ArchType || (exports.ArchType = ArchType = {}));
exports.addonArchitectureMap = new Map();
/**
 * Returns true of false depending on if the passed addon is
 * supported by the passed architecture
 * @param addOn, arch
 * @returns boolean
 */
function isSupportedArchitecture(addOnName, arch) {
    const archs = exports.addonArchitectureMap.get(addOnName);
    if (archs === undefined) {
        if (arch === ArchType.X86) {
            return true;
        }
        else {
            return false;
        }
    }
    return archs.includes(arch);
}
function validateSupportedArchitecture(addOnName, arch, strictValidation) {
    if (!isSupportedArchitecture(addOnName, arch)) {
        if ((strictValidation) || (strictValidation === undefined)) {
            throw new Error(`Addon ${addOnName} is not supported on architecture ${arch}`);
        }
        else {
            console.warn(`Addon ${addOnName} is not supported on architecture ${arch}`);
        }
    }
}
/**
 * Decorator function that adds this metatdata to globalmap.
 * @param arch
 * @returns
 */
// eslint-disable-next-line @typescript-eslint/ban-types
function supportsX86(constructor) {
    const addonName = constructor.name;
    addAddonArch(addonName, ArchType.X86);
}
// eslint-disable-next-line @typescript-eslint/ban-types
function supportsARM(constructor) {
    const addonName = constructor.name;
    addAddonArch(addonName, ArchType.ARM);
}
// eslint-disable-next-line @typescript-eslint/ban-types
function supportsALL(constructor) {
    const addonName = constructor.name;
    addAddonArch(addonName, ArchType.X86);
    addAddonArch(addonName, ArchType.ARM);
}
function addAddonArch(addonName, architecture) {
    if (exports.addonArchitectureMap.has(addonName)) {
        const value = exports.addonArchitectureMap.get(addonName);
        if ((value !== undefined) && !value.includes(architecture)) {
            value.push(architecture);
        }
        else {
            exports.addonArchitectureMap.set(addonName, [architecture]);
        }
    }
    else {
        exports.addonArchitectureMap.set(addonName, [architecture]);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJjaGl0ZWN0dXJlLXV0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3V0aWxzL2FyY2hpdGVjdHVyZS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFjQSwwREFZQztBQUVELHNFQVNDO0FBU0Qsa0NBR0M7QUFHRCxrQ0FHQztBQUdELGtDQUlDO0FBOURELElBQVksUUFHWDtBQUhELFdBQVksUUFBUTtJQUNsQix1QkFBVyxDQUFBO0lBQ1gsdUJBQVcsQ0FBQTtBQUNiLENBQUMsRUFIVyxRQUFRLHdCQUFSLFFBQVEsUUFHbkI7QUFFWSxRQUFBLG9CQUFvQixHQUFHLElBQUksR0FBRyxFQUFxQixDQUFDO0FBRWpFOzs7OztHQUtHO0FBRUgsU0FBZ0IsdUJBQXVCLENBQUMsU0FBaUIsRUFBRSxJQUFjO0lBRXZFLE1BQU0sS0FBSyxHQUFHLDRCQUFvQixDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNsRCxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUUsQ0FBQztRQUN4QixJQUFJLElBQUksS0FBSyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDMUIsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO2FBQ0ksQ0FBQztZQUNKLE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQztJQUNILENBQUM7SUFDRCxPQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUVELFNBQWdCLDZCQUE2QixDQUFDLFNBQWlCLEVBQUUsSUFBYyxFQUFFLGdCQUEwQjtJQUN6RyxJQUFJLENBQUMsdUJBQXVCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUM7UUFDOUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxTQUFTLENBQUMsRUFBRSxDQUFDO1lBQzNELE1BQU0sSUFBSSxLQUFLLENBQUMsU0FBUyxTQUFTLHFDQUFxQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ2pGLENBQUM7YUFDSSxDQUFDO1lBQ0osT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLFNBQVMscUNBQXFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDOUUsQ0FBQztJQUNILENBQUM7QUFDSCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUVILHdEQUF3RDtBQUN4RCxTQUFnQixXQUFXLENBQUMsV0FBcUI7SUFDL0MsTUFBTSxTQUFTLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQztJQUNuQyxZQUFZLENBQUMsU0FBUyxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBRUQsd0RBQXdEO0FBQ3hELFNBQWdCLFdBQVcsQ0FBQyxXQUFxQjtJQUMvQyxNQUFNLFNBQVMsR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDO0lBQ25DLFlBQVksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ3hDLENBQUM7QUFFRCx3REFBd0Q7QUFDeEQsU0FBZ0IsV0FBVyxDQUFDLFdBQXFCO0lBQy9DLE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7SUFDbkMsWUFBWSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEMsWUFBWSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUVELFNBQVMsWUFBWSxDQUFDLFNBQWlCLEVBQUUsWUFBc0I7SUFDN0QsSUFBSSw0QkFBb0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQztRQUN4QyxNQUFNLEtBQUssR0FBRyw0QkFBb0IsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbEQsSUFBSSxDQUFDLEtBQUssS0FBSyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQztZQUMzRCxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQzNCLENBQUM7YUFDSSxDQUFDO1lBQ0osNEJBQW9CLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7UUFDdEQsQ0FBQztJQUNILENBQUM7U0FDSSxDQUFDO1FBQ0osNEJBQW9CLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDdEQsQ0FBQztBQUNILENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZW51bSBBcmNoVHlwZSB7XG4gIEFSTSA9IFwiYXJtXCIsXG4gIFg4NiA9IFwieDg2XCIsXG59XG5cbmV4cG9ydCBjb25zdCBhZGRvbkFyY2hpdGVjdHVyZU1hcCA9IG5ldyBNYXA8c3RyaW5nLEFyY2hUeXBlW10+KCk7XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIG9mIGZhbHNlIGRlcGVuZGluZyBvbiBpZiB0aGUgcGFzc2VkIGFkZG9uIGlzIFxuICogc3VwcG9ydGVkIGJ5IHRoZSBwYXNzZWQgYXJjaGl0ZWN0dXJlXG4gKiBAcGFyYW0gYWRkT24sIGFyY2hcbiAqIEByZXR1cm5zIGJvb2xlYW5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNTdXBwb3J0ZWRBcmNoaXRlY3R1cmUoYWRkT25OYW1lOiBzdHJpbmcsIGFyY2g6IEFyY2hUeXBlKSA6IGJvb2xlYW4gfCB1bmRlZmluZWQge1xuXG4gIGNvbnN0IGFyY2hzID0gYWRkb25BcmNoaXRlY3R1cmVNYXAuZ2V0KGFkZE9uTmFtZSk7XG4gIGlmIChhcmNocyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKGFyY2ggPT09IEFyY2hUeXBlLlg4Nikge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYXJjaHMuaW5jbHVkZXMoYXJjaCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVN1cHBvcnRlZEFyY2hpdGVjdHVyZShhZGRPbk5hbWU6IHN0cmluZywgYXJjaDogQXJjaFR5cGUsIHN0cmljdFZhbGlkYXRpb24/OiBib29sZWFuICkgOiB2b2lkIHtcbiAgaWYgKCFpc1N1cHBvcnRlZEFyY2hpdGVjdHVyZShhZGRPbk5hbWUsIGFyY2gpKSB7XG4gICAgaWYgKChzdHJpY3RWYWxpZGF0aW9uKSB8fCAoc3RyaWN0VmFsaWRhdGlvbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBBZGRvbiAke2FkZE9uTmFtZX0gaXMgbm90IHN1cHBvcnRlZCBvbiBhcmNoaXRlY3R1cmUgJHthcmNofWApO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihgQWRkb24gJHthZGRPbk5hbWV9IGlzIG5vdCBzdXBwb3J0ZWQgb24gYXJjaGl0ZWN0dXJlICR7YXJjaH1gKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEZWNvcmF0b3IgZnVuY3Rpb24gdGhhdCBhZGRzIHRoaXMgbWV0YXRkYXRhIHRvIGdsb2JhbG1hcC5cbiAqIEBwYXJhbSBhcmNoXG4gKiBAcmV0dXJucyBcbiAqL1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzWDg2KGNvbnN0cnVjdG9yOiBGdW5jdGlvbikge1xuICBjb25zdCBhZGRvbk5hbWUgPSBjb25zdHJ1Y3Rvci5uYW1lO1xuICBhZGRBZGRvbkFyY2goYWRkb25OYW1lLCBBcmNoVHlwZS5YODYpO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzQVJNKGNvbnN0cnVjdG9yOiBGdW5jdGlvbikge1xuICBjb25zdCBhZGRvbk5hbWUgPSBjb25zdHJ1Y3Rvci5uYW1lO1xuICBhZGRBZGRvbkFyY2goYWRkb25OYW1lLCBBcmNoVHlwZS5BUk0pO1xufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10eXBlc1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzQUxMKGNvbnN0cnVjdG9yOiBGdW5jdGlvbikge1xuICBjb25zdCBhZGRvbk5hbWUgPSBjb25zdHJ1Y3Rvci5uYW1lO1xuICBhZGRBZGRvbkFyY2goYWRkb25OYW1lLCBBcmNoVHlwZS5YODYpO1xuICBhZGRBZGRvbkFyY2goYWRkb25OYW1lLCBBcmNoVHlwZS5BUk0pO1xufVxuXG5mdW5jdGlvbiBhZGRBZGRvbkFyY2goYWRkb25OYW1lOiBzdHJpbmcsIGFyY2hpdGVjdHVyZTogQXJjaFR5cGUpIHtcbiAgaWYgKGFkZG9uQXJjaGl0ZWN0dXJlTWFwLmhhcyhhZGRvbk5hbWUpKSB7XG4gICAgY29uc3QgdmFsdWUgPSBhZGRvbkFyY2hpdGVjdHVyZU1hcC5nZXQoYWRkb25OYW1lKTtcbiAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQpICYmICF2YWx1ZS5pbmNsdWRlcyhhcmNoaXRlY3R1cmUpKSB7XG4gICAgICB2YWx1ZS5wdXNoKGFyY2hpdGVjdHVyZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgYWRkb25BcmNoaXRlY3R1cmVNYXAuc2V0KGFkZG9uTmFtZSwgW2FyY2hpdGVjdHVyZV0pO1xuICAgIH1cbiAgfVxuICBlbHNlIHtcbiAgICBhZGRvbkFyY2hpdGVjdHVyZU1hcC5zZXQoYWRkb25OYW1lLCBbYXJjaGl0ZWN0dXJlXSk7XG4gIH1cbn0iXX0=