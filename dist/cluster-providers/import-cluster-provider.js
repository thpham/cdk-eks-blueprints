"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportClusterProvider = void 0;
exports.describeCluster = describeCluster;
const spi_1 = require("../spi");
const generic_cluster_provider_1 = require("./generic-cluster-provider");
const eks = require("aws-cdk-lib/aws-eks");
const sdk = require("@aws-sdk/client-eks");
const utils_1 = require("../resource-providers/utils");
const resource_providers_1 = require("../resource-providers");
const utils_2 = require("../utils");
const id_utils_1 = require("../utils/id-utils");
/**
 * Importing cluster into the blueprint enabling limited blueprinting capabilities such as adding certain addons,
 * teams.
 */
class ImportClusterProvider {
    constructor(props) {
        var _a;
        this.props = props;
        this.id = (_a = props.id) !== null && _a !== void 0 ? _a : ((0, id_utils_1.isToken)(this.props.clusterName) ? (0, id_utils_1.uniqueId)() : this.props.clusterName);
    }
    /**
     * Implements contract method to create a cluster, by importing an existing cluster.
     * @param scope
     * @param vpc
     * @param _secretsEncryptionKey
     * @returns
     */
    createCluster(scope, vpc, _secretsEncryptionKey) {
        const props = { ...this.props, vpc };
        if (!props.kubectlLayer) {
            props.kubectlLayer = (0, generic_cluster_provider_1.selectKubectlLayer)(scope, props.version);
        }
        const existingCluster = eks.Cluster.fromClusterAttributes(scope, `imported-cluster-${this.id}`, props);
        return new spi_1.ClusterInfo(existingCluster, this.props.version);
    }
    /**
     * Requires iam permission to eks.DescribeCluster at build time. Retrieves the cluster information using DescribeCluster api and
     * creates an import cluster provider.
     * @param clusterName name of the cluster
     * @param region target rego
     * @param kubectlRole iam Role that provides access to the cluster API (kubectl). The CDK custom resource should be able to assume the role
     * which in some cases may require trust policy for the account root principal.
     * @returns the cluster provider with the import cluster configuration
     */
    static async fromClusterLookup(clusterName, region, kubectlRole) {
        const sdkCluster = await describeCluster(clusterName, process.env.CDK_DEFAULT_REGION);
        return this.fromClusterAttributes(sdkCluster, kubectlRole);
    }
    /**
     * Creates a cluster provider for an existing cluster based on the passed result of the describe cluster command.
     * @param sdkCluster
     * @param kubectlRole
     * @returns
     */
    static fromClusterAttributes(sdkCluster, kubectlRole) {
        var _a, _b, _c;
        return new ImportClusterProvider({
            clusterName: sdkCluster.name,
            version: eks.KubernetesVersion.of(sdkCluster.version),
            clusterEndpoint: sdkCluster.endpoint,
            openIdConnectProvider: (0, utils_1.getResource)(context => new resource_providers_1.LookupOpenIdConnectProvider(sdkCluster.identity.oidc.issuer).provide(context)),
            clusterCertificateAuthorityData: (_a = sdkCluster.certificateAuthority) === null || _a === void 0 ? void 0 : _a.data,
            kubectlRoleArn: kubectlRole.roleArn,
            clusterSecurityGroupId: (_b = sdkCluster.resourcesVpcConfig) === null || _b === void 0 ? void 0 : _b.clusterSecurityGroupId,
            securityGroupIds: (_c = sdkCluster.resourcesVpcConfig) === null || _c === void 0 ? void 0 : _c.securityGroupIds
        });
    }
}
exports.ImportClusterProvider = ImportClusterProvider;
/**
 * Wraps API call to get the data on the eks.Cluster.
 * @param clusterName
 * @param region
 * @returns
 */
async function describeCluster(clusterName, region) {
    const client = new sdk.EKSClient({ region });
    const input = {
        name: clusterName
    };
    const command = new sdk.DescribeClusterCommand(input);
    try {
        const response = await client.send(command);
        return response.cluster;
    }
    catch (error) {
        utils_2.logger.error(error);
        throw error;
    }
}
//# sourceMappingURL=data:application/json;base64,