"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvY2x1c3Rlci1wcm92aWRlcnMvdHlwZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGVjMiBmcm9tIFwiYXdzLWNkay1saWIvYXdzLWVjMlwiO1xuaW1wb3J0ICogYXMgZWtzIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtZWtzXCI7XG5pbXBvcnQgeyBBdXRvU2NhbGluZ0dyb3VwQ2FwYWNpdHlPcHRpb25zIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1la3NcIjtcblxuLyoqXG4gKiBDb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBjdXN0b20gQU1JLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIExhdW5jaFRlbXBsYXRlUHJvcHMge1xuICAgIC8qKlxuICAgICAqIFNwZWNpZmllcyBob3cgYmxvY2sgZGV2aWNlcyBhcmUgZXhwb3NlZCB0byB0aGUgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBibG9ja0RldmljZXM/OiBlYzIuQmxvY2tEZXZpY2VbXTtcbiAgICAvKipcbiAgICAgKiBUaGUgY3VzdG9tIEFNSSBmb3IgdGhlIG5vZGUgZ3JvdXAuXG4gICAgICovXG4gICAgbWFjaGluZUltYWdlPzogZWMyLklNYWNoaW5lSW1hZ2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdXNlckRhdGEgZm9yIHdvcmtlciBub2RlIHdoZW4gdXNpbmcgY3VzdG9tIEFNSS4gT25seSBhcHBsaWNhYmxlIHdoZW4gY3VzdG9tQW1pIGlzIHVzZWQuXG4gICAgICovXG4gICAgdXNlckRhdGE/OiBlYzIuVXNlckRhdGE7XG5cbiAgICAvKipcbiAgICAgKiBDdXN0b20gVGFncyBmb3IgbGF1bmNoIHRlbXBsYXRlIHdoaWNoIHdpbGwgcHJvcG9nYXRlIHRvIHdvcmtlciBub2Rlcy5cbiAgICAgKi9cbiAgICB0YWdzPzoge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBJTURTdjIgc2hvdWxkIGJlIHJlcXVpcmVkIG9uIGxhdW5jaGVkIGluc3RhbmNlcy4gKG9wdGlvbmFsLCBkZWZhdWx0OiBmYWxzZSlcbiAgICAgKi9cbiAgICByZXF1aXJlSW1kc3YyPzogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIFNlY3VyaXR5IGdyb3VwIHRvIGFzc2lnbiB0byBpbnN0YW5jZXMgY3JlYXRlZCB3aXRoIHRoZSBsYXVuY2ggdGVtcGxhdGUuXG4gICAgICovXG4gICAgc2VjdXJpdHlHcm91cD86IGVjMi5JU2VjdXJpdHlHcm91cDtcbn1cblxuXG5leHBvcnQgaW50ZXJmYWNlIE1hbmFnZWROb2RlR3JvdXAgZXh0ZW5kcyBPbWl0PGVrcy5Ob2RlZ3JvdXBPcHRpb25zLCBcImxhdW5jaFRlbXBsYXRlXCIgfCBcInN1Ym5ldHNcIiB8IFwiY2FwYWNpdHlUeXBlXCIgfCBcInJlbGVhc2VWZXJzaW9uXCI+IHtcblxuICAgIC8qKlxuICAgICAqIElkIG9mIHRoaXMgbm9kZSBncm91cC4gRXhwZWN0ZWQgdG8gYmUgdW5pcXVlIGluIGNsdXN0ZXIgc2NvcGUuXG4gICAgICovXG4gICAgaWQ6IHN0cmluZywgXG5cbiAgICAvKipcbiAgICAgKiBNaW4gc2l6ZSBvZiB0aGUgbm9kZSBncm91cFxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICBtaW5TaXplPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogTWF4IHNpemUgb2YgdGhlIG5vZGUgZ3JvdXAuXG4gICAgICogQGRlZmF1bHQgM1xuICAgICAqL1xuICAgIG1heFNpemU/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBEZXNpcmVkIHNpemUsIGRlZmF1bHRzIHRvIG1pbiBzaXplLlxuICAgICAqL1xuICAgIGRlc2lyZWRTaXplPzogbnVtYmVyO1xuXG4gICAgLyoqXG4gICAgICogSW5zdGFuY2UgdHlwZXMgdXNlZCBmb3IgdGhlIG5vZGUgZ3JvdXAuIE11bHRpcGxlIHR5cGVzIG1ha2VzIHNlbnNlIGlmIGNhcGFjaXR5IHR5cGUgaXMgU1BPVC5cbiAgICAgKiBAZGVmYXVsdCBtNS5sYXJnZVxuICAgICAqL1xuICAgIGluc3RhbmNlVHlwZXM/OiBlYzIuSW5zdGFuY2VUeXBlW107XG5cbiAgICAvKipcbiAgICAgKiBDaG9vc2UgQU1JIHR5cGUgZm9yIHRoZSBtYW5hZ2VkIG5vZGUgZ3JvdXAuXG4gICAgICovXG4gICAgYW1pVHlwZT86IGVrcy5Ob2RlZ3JvdXBBbWlUeXBlO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBwcm9wZXJ0eSBpcyB1c2VkIHRvIHVwZ3JhZGUgbm9kZSBncm91cHMgdG8gdGhlIGxhdGVzdCBrdWJlbGV0IGJ5IHVwZ3JhZGluZyBub2RlIGdyb3VwIEFNSS5cbiAgICAgKiBMb29rIHVwIHRoZSB2ZXJzaW9ucyBoZXJlIChtYXBwZWQgdG8gS3ViZXJuZXRlcyB2ZXJzaW9uKTogaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2Vrcy9sYXRlc3QvdXNlcmd1aWRlL2Vrcy1saW51eC1hbWktdmVyc2lvbnMuaHRtbFxuICAgICAqL1xuICAgIGFtaVJlbGVhc2VWZXJzaW9uPzogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogVGhlIExhdW5jaCBUZW1wbGF0ZSBwcm9wZXJ0aWVzIGZvciB0aGUgTm9kZXMuXG4gICAgICogYGFtaVR5cGVgIGFuZCBgYW1pUmVsZWFzZVZlcnNpb25gIHdpbGwgYmUgaWdub3JlZCBpZiB0aGlzIGlzIHNldC5cbiAgICAgKi9cbiAgICBsYXVuY2hUZW1wbGF0ZT86IExhdW5jaFRlbXBsYXRlUHJvcHM7XG5cbiAgICAvKipcbiAgICAgKiBTZWxlY3QgZWl0aGVyIFNQT1Qgb3IgT04tREVNQU5EXG4gICAgICovXG4gICAgbm9kZUdyb3VwQ2FwYWNpdHlUeXBlPzogZWtzLkNhcGFjaXR5VHlwZTtcblxuICAgIC8qKlxuICAgICAqIFN1Ym5ldHMgZm9yIHRoZSBhdXRvc2NhbGluZyBncm91cCB3aGVyZSBub2RlcyAoaW5zdGFuY2VzKSB3aWxsIGJlIHBsYWNlZC5cbiAgICAgKiBAZGVmYXVsdCBhbGwgcHJpdmF0ZSBzdWJuZXRzXG4gICAgICovXG4gICAgbm9kZUdyb3VwU3VibmV0cz86IGVjMi5TdWJuZXRTZWxlY3Rpb247XG5cbiAgICAvKipcbiAgICAgKiBJZiBzZXQgdG8gdHJ1ZSB3aWxsIGFkZCBBbWF6b25TU01NYW5hZ2VkSW5zdGFuY2VDb3JlIHRvIHRoZSBub2RlIHJvbGUuXG4gICAgICovXG4gICAgZW5hYmxlU3NtUGVybWlzc2lvbnM/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEEgbm9kZSBncm91cHMgZm9yIEVLUyB0aGF0IGxldmVyYWdlIEVDMiBBdXRvc2NhbGluZyBHcm91cHMuXG4gKiBBbHNvIHJlZmVycmVkIHRvIGFzIFwic2VsZi1tYW5hZ2VkXCIgbm9kZSBncm91cCwgaW1wbHlpbmcgdGhhdCBtYWludGVuYW5jZSBvZiB0aGUgZ3JvdXBcbiAqIGlzIHBlcmZvcm1lZCBieSB0aGUgY3VzdG9tZXIgKGFzIG9wcG9zZWQgdG8gQVdTIGFzIGluIGNhc2Ugb2YgYSBNYW5hZ2VkTm9kZUdyb3VwKS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBBdXRvc2NhbGluZ05vZGVHcm91cCBleHRlbmRzIE9taXQ8QXV0b1NjYWxpbmdHcm91cENhcGFjaXR5T3B0aW9ucywgXCJtaW5DYXBhY2l0eVwiIHwgXCJtYXhDYXBhY2l0eVwiIHwgXCJkZXNpcmVkQ2FwYWNpdHlcIiB8IFwiaW5zdGFuY2VUeXBlXCIgfCBcInZwY1N1Ym5ldHNcIj4ge1xuXG4gICAgLyoqXG4gICAgICogSWQgb2YgdGhpcyBub2RlIGdyb3VwLiBFeHBlY3RlZCB0byBiZSB1bmlxdWUgaW4gY2x1c3RlciBzY29wZS5cbiAgICAgKi9cbiAgICBpZDogc3RyaW5nLCBcblxuICAgIC8qKlxuICAgICAqIE1pbiBzaXplIG9mIHRoZSBub2RlIGdyb3VwXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuICAgIG1pblNpemU/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBNYXggc2l6ZSBvZiB0aGUgbm9kZSBncm91cC5cbiAgICAgKiBAZGVmYXVsdCAzXG4gICAgICovXG4gICAgbWF4U2l6ZT86IG51bWJlcjtcblxuICAgIC8qKlxuICAgICAqIERlc2lyZWQgc2l6ZSwgZGVmYXVsdHMgdG8gbWluIHNpemUuXG4gICAgICovXG4gICAgZGVzaXJlZFNpemU/OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBJbnN0YW5jZSB0eXBlIG9mIHRoZSBpbnN0YW5jZXMgdG8gc3RhcnQuIElmIG5vdCBzcGVjaWZpZWQgZGVmYXVsdHMgYXJlIGFwcGxpZWQgaW4gdGhlIGZvbGxvd2luZyBvcmRlcjpcbiAgICAgKiAtICdla3MuZGVmYXVsdC5pbnN0YW5jZS10eXBlJyBpbiBDREsgY29udGV4dCAoZS5nLiB+Ly5jZGsuanNvbiB1bmRlciBcImNvbnRleHRcIiBrZXkpKVxuICAgICAqIC0gTTUuTGFyZ2VcbiAgICAgKi9cbiAgICBpbnN0YW5jZVR5cGU/OiBlYzIuSW5zdGFuY2VUeXBlO1xuXG4gICAgLyoqXG4gICAgICogU3VibmV0cyBmb3IgdGhlIGF1dG9zY2FsaW5nIGdyb3VwIHdoZXJlIG5vZGVzIChpbnN0YW5jZXMpIHdpbGwgYmUgcGxhY2VkLlxuICAgICAqIEBkZWZhdWx0IGFsbCBwcml2YXRlIHN1Ym5ldHNcbiAgICAgKi9cbiAgICBub2RlR3JvdXBTdWJuZXRzPzogZWMyLlN1Ym5ldFNlbGVjdGlvbjtcblxufVxuIl19